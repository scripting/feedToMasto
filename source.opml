<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- OPML generated by OPML Editor v10.1b19 on Tue, 16 May 2023 22:44:34 GMT -->

<!-- 
   Hi this is Dave Winer. I write all my project code in an outliner, which 
   generates all the files that make up this GitHub project. You'll see a 
   source.opml file like this in each of my projects. It contains the outline 
   source that the repo files were generated from. This is the most logical place 
   to store them. You can read the code in any outliner that supports OPML, which 
   includes http://drummer.scripting.com. You can use the Open URL command in 
   Drummer's File menu to open the "raw" version of this file straight from the 
   GitHub repo.
 -->

<opml version="2.0">
	<head>
		<title>nodeEditor: feedToMasto</title>
		<dateCreated>Mon, 28 Nov 2022 22:00:42 GMT</dateCreated>
		<dateModified>Tue, 16 May 2023 22:44:34 GMT</dateModified>
		<ownerName>Dave Winer</ownerName>
		<ownerId>http://davewiner.com/</ownerId>
		<expansionState>1, 8</expansionState>
		<vertScrollState>1</vertScrollState>
		<windowTop>195</windowTop>
		<windowLeft>588</windowLeft>
		<windowBottom>1210</windowBottom>
		<windowRight>1867</windowRight>
		</head>
	<body>
		<outline text="/scripting.com/code/feedtomasto/">
			<outline text="worknotes.md" created="Fri, 24 Jun 2022 18:16:01 GMT">
				<outline text="#### 5/16/23 by DW" created="Tue, 16 May 2023 22:43:11 GMT">
					<outline text="Strings with emoji characters in them take up more space in a JSON file than those without. " created="Tue, 16 May 2023 22:43:12 GMT"/>
					</outline>
				<outline text="#### 5/14/23 by DW -- v0.6.3" created="Sun, 14 May 2023 14:29:31 GMT">
					<outline text="Reorg'd the code for bluesky and masto, to make them a single rountine that calls local routines." created="Sun, 14 May 2023 14:29:32 GMT"/>
					<outline text="Then added support for WordPress." created="Sun, 14 May 2023 15:17:21 GMT"/>
					</outline>
				<outline text="#### 5/13/23 by DW" created="Sat, 13 May 2023 14:34:54 GMT">
					<outline text="When we check for &lt;i&gt;enabled&lt;/i&gt; in masto table, handle case where it doesn't exist. Avoid breakage with users of previous versions." created="Sat, 13 May 2023 14:35:06 GMT"/>
					<outline text="Look for and use maxCtChars in masto or bluesky tables." created="Sat, 13 May 2023 14:37:45 GMT"/>
					<outline text="Calling this version 0.6.0 because we added support for Bluesky." created="Sat, 13 May 2023 15:13:51 GMT"/>
					</outline>
				<outline text="#### 5/12/23 by DW" created="Fri, 12 May 2023 12:36:12 GMT">
					<outline text="Add Bluesky support." created="Fri, 12 May 2023 12:36:19 GMT">
						<outline text="added config.bluesky" created="Fri, 12 May 2023 13:13:45 GMT"/>
						<outline text="added config.masto.enabled, allows you to turn off one service" created="Fri, 12 May 2023 13:14:15 GMT"/>
						<outline text="there already was a config.enabled. we only do checkFeeds if it's true, so you can shut down an instance so it can be tested elsewhere" created="Fri, 12 May 2023 13:16:17 GMT"/>
						</outline>
					<outline text="Update readme.md to indicate new functionality" created="Sat, 13 May 2023 14:30:26 GMT"/>
					<outline text="Breakage in new version" created="Sat, 13 May 2023 14:38:43 GMT">
						<outline text="config.disclaimer no longer supported." created="Sat, 13 May 2023 14:38:57 GMT"/>
						</outline>
					</outline>
				<outline text="#### 4/18/23 by DW" created="Tue, 18 Apr 2023 14:49:44 GMT">
					<outline text="Hook it up to FeedLand's websockets interface so we're notified instantly that feeds updated. Much simpler than the rssCloud interface. " created="Tue, 18 Apr 2023 14:49:46 GMT"/>
					</outline>
				<outline text="#### 4/17/23 by DW" created="Mon, 17 Apr 2023 20:06:37 GMT">
					<outline text="I'm going to use this to map my linkblog feed to Mastodon. " created="Mon, 17 Apr 2023 20:06:39 GMT"/>
					</outline>
				<outline text="#### 12/4/22 by DW" created="Sun, 04 Dec 2022 13:50:10 GMT">
					<outline text="Rewrote mastopost to send the params in the body of the post instead of as url params. " created="Sun, 04 Dec 2022 13:50:11 GMT"/>
					<outline text="This is the way forms work, and posts are basically emulating forms, so it seemed this was the most conservative way to go and should give the maximum interop." created="Sun, 04 Dec 2022 13:50:42 GMT"/>
					</outline>
				<outline text="#### 12/3/22 by DW -- v0.4.3" created="Sat, 03 Dec 2022 17:37:27 GMT">
					<outline text="Follow redirects on HTTP requests. " created="Sat, 03 Dec 2022 17:37:29 GMT"/>
					</outline>
				<outline text="#### 12/2/22 by DW -- v0.4.2" created="Fri, 02 Dec 2022 18:00:06 GMT">
					<outline text="Strip HTML markup from the description element, if it's used. Mastodon neuters the HTML tags. Not a good look." created="Fri, 02 Dec 2022 18:00:07 GMT"/>
					<outline text="Check feeds at startup. Shouldn't have to wait a minute or more for it to check. " created="Fri, 02 Dec 2022 18:05:35 GMT"/>
					<outline text="Added a missing step in the instructions in the readme." created="Fri, 02 Dec 2022 18:07:07 GMT"/>
					</outline>
				<outline text="#### 12/1/22 by DW -- v0.4.1" created="Thu, 01 Dec 2022 21:48:32 GMT">
					<outline text="We now do a better job with items that have both titles and descriptions. Previously it was either/or -- either it had a title or a description but not both. Now we allocate for the disclaimer + title + link and whatever is left over we give to the description/markdown text." created="Thu, 01 Dec 2022 21:48:44 GMT"/>
					<outline text="Added three more feeds to the initial config.json: my linkblog feed, NYT Most Recent Stories and the FeedLand Likes feed from all users. The NYT feed has a consistent format, and the Likes feed is all over the map, and it's easy to add an item to the feed, just &lt;i&gt;like&lt;/i&gt; something in FeedLand, the feed is rebuilt immediately. " created="Thu, 01 Dec 2022 22:19:29 GMT"/>
					<outline text="Also emptied out the disclaimer in the initial config.json." created="Thu, 01 Dec 2022 22:25:57 GMT"/>
					</outline>
				<outline text="#### 11/28/22 by DW " created="Fri, 24 Jun 2022 18:16:05 GMT">
					<outline text="Check a list of feeds periodically, post new items to Mastodon." created="Fri, 24 Jun 2022 18:16:09 GMT"/>
					</outline>
				</outline>
			<outline text="package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;feedtomasto&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.6.3&quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@scripting.com&gt;&quot;,"/>
					<outline text="&quot;main&quot;: &quot;feedtomasto.js&quot;,"/>
					<outline text="&quot;scripts&quot;: {" created="Mon, 17 Apr 2023 15:10:46 GMT">
						<outline text=" &quot;start&quot;: &quot;node feedtomasto.js&quot; " created="Mon, 17 Apr 2023 15:10:51 GMT"/>
						<outline text="}," created="Mon, 17 Apr 2023 15:10:54 GMT"/>
						</outline>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;request&quot;: &quot;*&quot;,"/>
						<outline text="&quot;websocket&quot;: &quot;*&quot;,"/>
						<outline text="&quot;reallysimple&quot;: &quot;*&quot;,"/>
						<outline text="&quot;wordpress&quot;: &quot;*&quot;"/>
						<outline text="} "/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="feedtomasto.js" created="Thu, 17 Feb 2022 14:26:38 GMT">
				<outline text="const myVersion = &quot;0.6.3&quot;, myProductName = &quot;feedToMasto&quot;; " created="Mon, 03 Feb 2014 03:21:03 GMT" pgfnum="36831"/>
				<outline text="" created="Wed, 24 Nov 2021 15:06:21 GMT"/>
				<outline text="const fs = require (&quot;fs&quot;);" created="Sat, 20 Feb 2021 22:03:12 GMT"/>
				<outline text="const request = require (&quot;request&quot;);"/>
				<outline text="const websocket = require (&quot;websocket&quot;).w3cwebsocket;"/>
				<outline text="const utils = require (&quot;daveutils&quot;);" created="Sat, 20 Feb 2021 22:03:12 GMT"/>
				<outline text="const reallysimple = require (&quot;reallysimple&quot;);" created="Sat, 05 Mar 2022 17:19:07 GMT"/>
				<outline text="const wordpress = require (&quot;wordpress&quot;); //5/14/23 by DW"/>
				<outline text="" created="Mon, 21 Nov 2022 20:15:42 GMT"/>
				<outline text="var config = {" created="Mon, 29 Nov 2021 15:52:16 GMT">
					<outline text="enabled: true," created="Wed, 30 Nov 2022 15:39:35 GMT"/>
					<outline text="feeds: [" created="Mon, 28 Nov 2022 23:04:47 GMT">
						<outline text="&quot;http://scripting.com/rss.xml&quot;," isComment="true" created="Mon, 28 Nov 2022 23:05:24 GMT"/>
						<outline text="&quot;http://data.feedland.org/feeds/davewiner.xml&quot;" created="Mon, 28 Nov 2022 23:05:24 GMT"/>
						<outline text="]," created="Mon, 28 Nov 2022 23:04:52 GMT"/>
						</outline>
					<outline text="masto: {" created="Mon, 28 Nov 2022 23:49:19 GMT">
						<outline text="enabled: false, //5/12/23 by DW" created="Fri, 12 May 2023 13:13:21 GMT"/>
						<outline text="appName: &quot;feedToMasto&quot;,"/>
						<outline text="urlMastodonServer: undefined,"/>
						<outline text="access_token: undefined,"/>
						<outline text="created_at: undefined,"/>
						<outline text="scope: &quot;write:statuses read:accounts&quot;,"/>
						<outline text="token_type: &quot;Bearer&quot;,"/>
						<outline text="maxCtChars: 500," created="Mon, 28 Nov 2022 23:20:05 GMT"/>
						<outline text="flServerSupportsMarkdown: false" created="Fri, 12 May 2023 18:06:07 GMT"/>
						<outline text="}," created="Mon, 28 Nov 2022 23:49:24 GMT"/>
						</outline>
					<outline text="bluesky: { //5/12/23 by DW" created="Fri, 12 May 2023 12:37:55 GMT">
						<outline text="enabled: false, " created="Fri, 12 May 2023 13:13:21 GMT"/>
						<outline text="urlsite: undefined," created="Sun, 23 Apr 2023 15:03:36 GMT"/>
						<outline text="username: undefined," created="Sun, 23 Apr 2023 15:03:36 GMT"/>
						<outline text="password: undefined," created="Sun, 23 Apr 2023 15:03:36 GMT"/>
						<outline text="maxCtChars: 300," created="Mon, 28 Nov 2022 23:20:05 GMT"/>
						<outline text="flServerSupportsMarkdown: false" created="Fri, 12 May 2023 18:06:07 GMT"/>
						<outline text="}," created="Fri, 12 May 2023 12:37:59 GMT"/>
						</outline>
					<outline text="wordpress: { //5/14/23 by DW" created="Fri, 12 May 2023 12:37:55 GMT">
						<outline text="enabled: false, " created="Fri, 12 May 2023 13:13:21 GMT"/>
						<outline text="urlsite: undefined," created="Sun, 23 Apr 2023 15:03:36 GMT"/>
						<outline text="username: undefined," created="Sun, 23 Apr 2023 15:03:36 GMT"/>
						<outline text="password: undefined," created="Sun, 23 Apr 2023 15:03:36 GMT"/>
						<outline text="maxCtChars: undefined, " created="Mon, 28 Nov 2022 23:20:05 GMT"/>
						<outline text="flServerSupportsMarkdown: false" created="Fri, 12 May 2023 18:06:07 GMT"/>
						<outline text="}," created="Fri, 12 May 2023 12:37:59 GMT"/>
						</outline>
					<outline text="dataFolder: &quot;data/&quot;," created="Mon, 21 Nov 2022 20:41:23 GMT"/>
					<outline text="ctSecsBetwChecks: 60," created="Mon, 28 Nov 2022 23:13:06 GMT"/>
					<outline text="maxCtChars: 500," created="Mon, 28 Nov 2022 23:20:05 GMT"/>
					<outline text="flOnlyPostNewItems: true, //if false when we start up we'll post all the items in the feed" created="Tue, 29 Nov 2022 17:46:10 GMT"/>
					<outline text="maxGuids: 2500, //we don't store the guids forever, after we have this number of guids, we start deleting the oldest ones" created="Tue, 29 Nov 2022 17:47:14 GMT"/>
					<outline text="flServerSupportsMarkdown: true, //we're optimistic! ;-)" isComment="true" created="Tue, 29 Nov 2022 18:49:57 GMT"/>
					<outline text="disclaimer: &quot;*This is a test. This came out of the archive of my blog. None of this happened today or yesterday. Still diggin!*&quot;," created="Wed, 30 Nov 2022 16:02:39 GMT"/>
					<outline text="port: process.env.PORT || 1414, //4/17/23 by DW" isComment="true" created="Mon, 17 Apr 2023 20:34:33 GMT"/>
					<outline text="flHttpEnabled: false, //4/17/23 by DW" isComment="true" created="Mon, 17 Apr 2023 20:35:52 GMT"/>
					<outline text="urlSocketServer: &quot;wss://feedland.org/&quot; //4/18/23 by DW " created="Mon, 21 Nov 2022 20:24:44 GMT"/>
					<outline text="};" created="Mon, 29 Nov 2021 15:52:19 GMT"/>
					</outline>
				<outline text="const fnameConfig = &quot;config.json&quot;;" created="Mon, 28 Nov 2022 23:31:55 GMT"/>
				<outline text="" created="Mon, 28 Nov 2022 23:28:05 GMT"/>
				<outline text="var stats = {" created="Mon, 28 Nov 2022 23:28:06 GMT">
					<outline text="guids: new Object ()" created="Mon, 28 Nov 2022 23:28:16 GMT"/>
					<outline text="};" created="Mon, 28 Nov 2022 23:28:12 GMT"/>
					</outline>
				<outline text="const fnameStats = &quot;stats.json&quot;;" created="Mon, 28 Nov 2022 23:31:55 GMT"/>
				<outline text="var flStatsChanged = false;" created="Mon, 28 Nov 2022 23:30:42 GMT"/>
				<outline text="" created="Sun, 14 May 2023 14:31:09 GMT"/>
				<outline text="var whenLastCheck = new Date (0);" created="Mon, 28 Nov 2022 23:09:28 GMT"/>
				<outline text="" created="Mon, 28 Nov 2022 23:05:37 GMT"/>
				<outline text="function statsChanged () {" created="Mon, 28 Nov 2022 23:32:35 GMT">
					<outline text="flStatsChanged = true;" created="Mon, 28 Nov 2022 23:32:47 GMT"/>
					<outline text="}" created="Mon, 28 Nov 2022 23:32:40 GMT"/>
					</outline>
				<outline text="function deleteOldGuids () {" created="Wed, 30 Nov 2022 15:32:57 GMT">
					<outline text="function countGuids () {" created="Wed, 30 Nov 2022 15:34:23 GMT">
						<outline text="var ct = 0;" created="Wed, 30 Nov 2022 15:34:50 GMT"/>
						<outline text="for (var x in stats.guids) {" created="Wed, 30 Nov 2022 15:35:01 GMT">
							<outline text="ct++" created="Wed, 30 Nov 2022 15:35:01 GMT"/>
							<outline text="}" created="Wed, 30 Nov 2022 15:35:03 GMT"/>
							</outline>
						<outline text="return (ct);" created="Wed, 30 Nov 2022 15:34:53 GMT"/>
						<outline text="}" created="Wed, 30 Nov 2022 15:34:28 GMT"/>
						</outline>
					<outline text="function deleteOldestGuid () {" created="Wed, 30 Nov 2022 15:25:15 GMT">
						<outline text="var oldestWhen = new Date (), oldestx;" created="Wed, 30 Nov 2022 15:27:07 GMT"/>
						<outline text="function dateLessThan (d1, d2) {">
							<outline text="return (new Date (d1) &lt; new Date (d2));"/>
							<outline text="}"/>
							</outline>
						<outline text="for (var x in stats.guids) {" created="Wed, 30 Nov 2022 15:26:36 GMT">
							<outline text="var theGuid = stats.guids [x];" created="Wed, 30 Nov 2022 15:28:05 GMT"/>
							<outline text="if (dateLessThan (theGuid.when, oldestWhen)) {" created="Wed, 30 Nov 2022 15:28:15 GMT">
								<outline text="oldestWhen = theGuid.when;" created="Wed, 30 Nov 2022 15:28:34 GMT"/>
								<outline text="oldestx = x;" created="Wed, 30 Nov 2022 15:28:41 GMT"/>
								<outline text="}" created="Wed, 30 Nov 2022 15:28:46 GMT"/>
								</outline>
							<outline text="}" created="Wed, 30 Nov 2022 15:27:03 GMT"/>
							</outline>
						<outline text="if (oldestx !== undefined) {" created="Wed, 30 Nov 2022 15:29:03 GMT">
							<outline text="delete stats.guids [oldestx];" created="Wed, 30 Nov 2022 15:29:16 GMT"/>
							<outline text="statsChanged ();" created="Wed, 30 Nov 2022 15:45:47 GMT"/>
							<outline text="}" created="Wed, 30 Nov 2022 15:29:37 GMT"/>
							</outline>
						<outline text="}" created="Wed, 30 Nov 2022 15:26:35 GMT"/>
						</outline>
					<outline text="var ct = countGuids () - config.maxGuids;" created="Wed, 30 Nov 2022 15:27:20 GMT"/>
					<outline text="if (ct &gt; 0) {" created="Wed, 30 Nov 2022 15:31:41 GMT">
						<outline text="console.log (&quot;deleteOldGuids: ct == &quot; + ct);" created="Wed, 30 Nov 2022 15:31:45 GMT"/>
						<outline text="for (var i = 1; i &lt;= ct; i++) {" created="Wed, 30 Nov 2022 15:29:53 GMT">
							<outline text="deleteOldestGuid ();" created="Wed, 30 Nov 2022 15:30:24 GMT"/>
							<outline text="}" created="Wed, 30 Nov 2022 15:30:19 GMT"/>
							</outline>
						<outline text="}" created="Wed, 30 Nov 2022 15:31:59 GMT"/>
						</outline>
					<outline text="}" created="Wed, 30 Nov 2022 15:33:03 GMT"/>
					</outline>
				<outline text="function isNewFeed (feedUrl) {" created="Tue, 29 Nov 2022 17:59:27 GMT">
					<outline text="var flnew = true;" created="Tue, 29 Nov 2022 18:00:31 GMT"/>
					<outline text="for (var x in stats.guids) {" created="Tue, 29 Nov 2022 17:59:47 GMT">
						<outline text="if (stats.guids [x].feedUrl == feedUrl) {" created="Tue, 29 Nov 2022 17:59:58 GMT">
							<outline text="flnew = false;" created="Tue, 29 Nov 2022 18:00:42 GMT"/>
							<outline text="break;" created="Tue, 29 Nov 2022 18:00:46 GMT"/>
							<outline text="}" created="Tue, 29 Nov 2022 18:00:26 GMT"/>
							</outline>
						<outline text="}" created="Tue, 29 Nov 2022 17:59:52 GMT"/>
						</outline>
					<outline text="return (flnew);" created="Tue, 29 Nov 2022 18:00:57 GMT"/>
					<outline text="}" created="Tue, 29 Nov 2022 17:59:35 GMT"/>
					</outline>
				<outline text="function buildParamList (paramtable) { //8/4/21 by DW" created="Sat, 09 Aug 2014 15:39:08 GMT" pgfnum="43181">
					<outline text="Changes" isComment="true" created="Wed, 04 Aug 2021 14:47:01 GMT">
						<outline text="8/4/21; 10:47:04 AM by DW" created="Wed, 04 Aug 2021 14:47:03 GMT">
							<outline text="Copied twBuildParamList. If an element of params is undefined, don't include it. We were encoding it as a string, &quot;undefined&quot; and all of a sudden on the other side, in davetwitter, it was calling it an error. It is pretty errorish, but why it started now, that's a mystery." created="Wed, 04 Aug 2021 14:47:04 GMT"/>
							</outline>
						</outline>
					<outline text="if (paramtable === undefined) {" created="Sun, 04 Dec 2022 13:46:26 GMT">
						<outline text="return (&quot;&quot;);" created="Sun, 04 Dec 2022 13:46:32 GMT"/>
						<outline text="}" created="Sun, 04 Dec 2022 13:46:35 GMT"/>
						</outline>
					<outline text="else {" created="Sun, 04 Dec 2022 13:46:37 GMT">
						<outline text="var s = &quot;&quot;;" created="Sat, 09 Aug 2014 15:39:47 GMT" pgfnum="43188"/>
						<outline text="for (var x in paramtable) {" created="Sat, 09 Aug 2014 15:39:38 GMT" pgfnum="43186">
							<outline text="if (paramtable [x] !== undefined) { //8/4/21 by DW" created="Wed, 04 Aug 2021 14:48:52 GMT">
								<outline text="if (s.length &gt; 0) {" created="Sat, 09 Aug 2014 15:40:02 GMT" pgfnum="43189">
									<outline text="s += &quot;&amp;&quot;;" created="Sat, 09 Aug 2014 15:40:08 GMT" pgfnum="43190"/>
									<outline text="}" created="Sat, 09 Aug 2014 15:40:14 GMT" pgfnum="43191"/>
									</outline>
								<outline text="s += x + &quot;=&quot; + encodeURIComponent (paramtable [x]);" created="Sat, 09 Aug 2014 15:40:19 GMT" pgfnum="43192"/>
								<outline text="}" created="Wed, 04 Aug 2021 14:49:01 GMT"/>
								</outline>
							<outline text="}" created="Sat, 09 Aug 2014 15:39:43 GMT" pgfnum="43187"/>
							</outline>
						<outline text="return (s);" created="Sat, 09 Aug 2014 15:40:54 GMT" pgfnum="43193"/>
						<outline text="}" created="Sun, 04 Dec 2022 13:46:40 GMT"/>
						</outline>
					<outline text="}" created="Sat, 09 Aug 2014 15:39:35 GMT" pgfnum="43185"/>
					</outline>
				<outline text="function saveItemForDebugging (item) {" created="Fri, 12 May 2023 14:48:44 GMT">
					<outline text="const f = &quot;data/items/&quot; + utils.random (1000, 9999) + &quot;.json&quot;;" created="Fri, 12 May 2023 14:49:00 GMT"/>
					<outline text="utils.sureFilePath (f, function () {">
						<outline text="fs.writeFile (f, utils.jsonStringify (item), function (err) {">
							<outline text="if (err) {" created="Fri, 12 May 2023 14:53:54 GMT">
								<outline text="console.log (err.message);" created="Fri, 12 May 2023 14:54:00 GMT"/>
								<outline text="}" created="Fri, 12 May 2023 14:54:06 GMT"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Fri, 12 May 2023 14:48:48 GMT"/>
					</outline>
				<outline text="function getDebuggingItem (num, callback) {" created="Fri, 12 May 2023 18:16:00 GMT">
					<outline text="const f = &quot;data/items/&quot; + num + &quot;.json&quot;;" created="Fri, 12 May 2023 14:49:00 GMT"/>
					<outline text="fs.readFile (f, function (err, jsontext) {" created="Fri, 12 May 2023 18:16:34 GMT">
						<outline text="if (err) {" created="Fri, 12 May 2023 18:16:49 GMT">
							<outline text="callback (err);" created="Fri, 12 May 2023 18:16:55 GMT"/>
							<outline text="}" created="Fri, 12 May 2023 18:16:58 GMT"/>
							</outline>
						<outline text="else {" created="Fri, 12 May 2023 18:16:59 GMT">
							<outline text="callback (undefined, JSON.parse (jsontext));" created="Fri, 12 May 2023 18:17:05 GMT"/>
							<outline text="}" created="Fri, 12 May 2023 18:17:18 GMT"/>
							</outline>
						<outline text="});" created="Fri, 12 May 2023 18:16:47 GMT"/>
						</outline>
					<outline text="}" created="Fri, 12 May 2023 18:16:13 GMT"/>
					</outline>
				<outline text="function getStringBytes (theString) { //5/16/23 by DW -- return the number of bytes a string takes up in a JSON file" created="Tue, 16 May 2023 22:39:24 GMT">
					<outline text="const jsontext = JSON.stringify (theString);" created="Tue, 16 May 2023 22:40:04 GMT"/>
					<outline text="const ctbytes = jsontext.length - 2; //subtract for quotes" created="Tue, 16 May 2023 22:40:04 GMT"/>
					<outline text="return (ctbytes);" created="Tue, 16 May 2023 22:41:11 GMT"/>
					<outline text="}" created="Tue, 16 May 2023 22:39:37 GMT"/>
					</outline>
				<outline text="" created="Fri, 12 May 2023 12:37:16 GMT"/>
				<outline text="//mastodon" created="Fri, 12 May 2023 12:37:16 GMT">
					<outline text="function mastoPostNewItem (item) {" created="Mon, 28 Nov 2022 23:39:49 GMT">
						<outline text="Changes" isComment="true" created="Sat, 13 May 2023 15:15:19 GMT">
							<outline text="5/13/23; 11:15:21 AM by DW" created="Sat, 13 May 2023 15:15:20 GMT">
								<outline text="Removed feedUrl param, we weren't using it." created="Sat, 13 May 2023 15:15:22 GMT"/>
								<outline text="Check new enabled boolean in config.masto." created="Sat, 13 May 2023 15:15:29 GMT"/>
								</outline>
							</outline>
						<outline text="if (utils.getBoolean (config.masto.enabled)) {" created="Sat, 13 May 2023 15:15:52 GMT">
							<outline text="function getStatusText (item, maxCtChars=config.maxCtChars) { " created="Fri, 12 May 2023 12:40:36 GMT">
								<outline text="Changes" isComment="true" created="Fri, 12 May 2023 18:10:51 GMT">
									<outline text="5/13/23; 11:11:55 AM by DW" created="Sat, 13 May 2023 15:11:55 GMT">
										<outline text="Returns a traditional linkblog post with the description first, followed by a link to the story. We use this for Mastodon and could use it for Twitter, but not Bluesky which handles links like we used to do it in scriptingNews format in 1999. I understand the rationale, but the world went the other way. " created="Sat, 13 May 2023 15:11:56 GMT"/>
										</outline>
									<outline text="5/12/23; 2:10:54 PM by DW" created="Fri, 12 May 2023 18:10:53 GMT">
										<outline text="I need to get this stripped down to bare minimum so I can get it straightened out." created="Fri, 12 May 2023 21:45:24 GMT"/>
										<outline text="Forget about sending markdown throught this, for now." created="Fri, 12 May 2023 18:10:54 GMT"/>
										<outline text="Forget about the disclaimer." created="Fri, 12 May 2023 18:10:54 GMT"/>
										</outline>
									</outline>
								<outline text="var statustext = &quot;&quot;;" created="Tue, 29 Nov 2022 00:08:18 GMT"/>
								<outline text="function add (s) {" created="Tue, 29 Nov 2022 00:07:39 GMT">
									<outline text="statustext += s;" created="Tue, 29 Nov 2022 00:07:51 GMT"/>
									<outline text="}" created="Tue, 29 Nov 2022 00:08:09 GMT"/>
									</outline>
								<outline text="function addText (desc) {" created="Tue, 29 Nov 2022 18:51:43 GMT">
									<outline text="desc = utils.trimWhitespace (utils.stripMarkup (desc));" created="Fri, 12 May 2023 21:47:37 GMT"/>
									<outline text="if (desc.length &gt; 0) {" created="Fri, 12 May 2023 21:56:27 GMT">
										<outline text="const maxcount = maxCtChars - (statustext.length + desc.length + 2); //the 2 is for the two newlines after the description" created="Thu, 01 Dec 2022 21:52:14 GMT"/>
										<outline text="desc = utils.maxStringLength (desc, maxcount, false, true) + &quot;\n\n&quot;;" created="Fri, 12 May 2023 21:57:01 GMT"/>
										<outline text="add (desc);"/>
										<outline text="}" created="Fri, 12 May 2023 21:56:28 GMT"/>
										</outline>
									<outline text="}" created="Tue, 29 Nov 2022 18:51:49 GMT"/>
									</outline>
								<outline text="function notEmpty (s) {" created="Fri, 12 May 2023 21:51:38 GMT">
									<outline text="if (s === undefined) {" created="Fri, 12 May 2023 21:51:47 GMT">
										<outline text="return (false);" created="Fri, 12 May 2023 21:52:15 GMT"/>
										<outline text="}" created="Fri, 12 May 2023 21:52:02 GMT"/>
										</outline>
									<outline text="if (s.length == 0) {" created="Fri, 12 May 2023 21:52:21 GMT">
										<outline text="return (false);" created="Fri, 12 May 2023 21:52:33 GMT"/>
										<outline text="}" created="Fri, 12 May 2023 21:52:30 GMT"/>
										</outline>
									<outline text="return (true);" created="Fri, 12 May 2023 21:52:41 GMT"/>
									<outline text="}" created="Fri, 12 May 2023 21:51:46 GMT"/>
									</outline>
								<outline text="if (notEmpty (item.title)) {" created="Fri, 12 May 2023 21:45:56 GMT">
									<outline text="addText (item.title);" created="Fri, 12 May 2023 21:46:16 GMT"/>
									<outline text="}" created="Fri, 12 May 2023 21:46:04 GMT"/>
									</outline>
								<outline text="else {" created="Fri, 12 May 2023 21:46:05 GMT">
									<outline text="addText (item.description);" created="Fri, 12 May 2023 21:46:16 GMT"/>
									<outline text="}" created="Fri, 12 May 2023 21:46:07 GMT"/>
									</outline>
								<outline text="if (notEmpty (item.link)) {" created="Tue, 29 Nov 2022 00:12:06 GMT">
									<outline text="add (item.link);" created="Tue, 29 Nov 2022 00:12:55 GMT"/>
									<outline text="}" created="Tue, 29 Nov 2022 00:12:19 GMT"/>
									</outline>
								<outline text="return (statustext);" created="Fri, 12 May 2023 12:41:21 GMT"/>
								<outline text="}" created="Fri, 12 May 2023 12:40:45 GMT"/>
								</outline>
							<outline text="function mastocall (path, params, callback) {" created="Mon, 21 Nov 2022 13:37:24 GMT">
								<outline text="var headers = undefined;" created="Mon, 21 Nov 2022 13:41:57 GMT"/>
								<outline text="if (config.masto.accessToken !== undefined) {" created="Mon, 21 Nov 2022 13:42:22 GMT">
									<outline text="headers = {">
										<outline text="Authorization: &quot;Bearer &quot; + config.masto.accessToken"/>
										<outline text="};"/>
										</outline>
									<outline text="}" created="Mon, 21 Nov 2022 13:42:32 GMT"/>
									</outline>
								<outline text="const theRequest = {">
									<outline text="url: config.masto.urlMastodonServer + path + &quot;?&quot; + buildParamList (params),"/>
									<outline text="method: &quot;GET&quot;,"/>
									<outline text="followAllRedirects: true, //12/3/22 by DW" created="Thu, 31 Jul 2014 16:39:18 GMT" pgfnum="43069"/>
									<outline text="maxRedirects: 5,"/>
									<outline text="headers,"/>
									<outline text="};"/>
									</outline>
								<outline text="request (theRequest, function (err, response, jsontext) {">
									<outline text="function sendBackError (defaultMessage) {" created="Sat, 26 Nov 2022 17:10:38 GMT">
										<outline text="var flcalledback = false;" created="Sat, 26 Nov 2022 17:11:24 GMT"/>
										<outline text="if (data !== undefined) {" created="Sat, 26 Nov 2022 17:11:24 GMT">
											<outline text="try {" created="Sat, 26 Nov 2022 17:11:37 GMT">
												<outline text="jstruct = JSON.parse (data);" created="Sat, 26 Nov 2022 17:11:46 GMT"/>
												<outline text="if (jstruct.error !== undefined) {" created="Sat, 26 Nov 2022 17:11:56 GMT">
													<outline text="callback ({message: jstruct.error});" created="Sat, 26 Nov 2022 17:12:31 GMT"/>
													<outline text="flcalledback = true;" created="Sat, 26 Nov 2022 17:12:58 GMT"/>
													<outline text="}" created="Sat, 26 Nov 2022 17:12:25 GMT"/>
													</outline>
												<outline text="}" created="Sat, 26 Nov 2022 17:11:38 GMT"/>
												</outline>
											<outline text="catch (err) {" created="Sat, 26 Nov 2022 17:11:39 GMT">
												<outline text="}" created="Sat, 26 Nov 2022 17:11:43 GMT"/>
												</outline>
											<outline text="}" created="Sat, 26 Nov 2022 17:11:31 GMT"/>
											<outline text="" created="Sat, 26 Nov 2022 17:11:32 GMT"/>
											</outline>
										<outline text="if (!flcalledback) {" created="Sat, 26 Nov 2022 17:11:24 GMT">
											<outline text="callback ({message: defaultMessage});" created="Sat, 26 Nov 2022 17:14:05 GMT"/>
											<outline text="}" created="Sat, 26 Nov 2022 17:13:24 GMT"/>
											</outline>
										<outline text="}" created="Sat, 26 Nov 2022 17:10:46 GMT"/>
										</outline>
									<outline text="if (err) {" created="Sun, 08 Aug 2021 15:33:13 GMT">
										<outline text="sendBackError (err.message);" created="Sun, 08 Aug 2021 15:33:17 GMT"/>
										<outline text="}" created="Sun, 08 Aug 2021 15:33:20 GMT"/>
										</outline>
									<outline text="else {" created="Sun, 08 Aug 2021 15:33:21 GMT">
										<outline text="var code = response.statusCode;" created="Tue, 04 Jan 2022 22:39:15 GMT"/>
										<outline text="if ((code &lt; 200) || (code &gt; 299)) {" created="Sun, 08 Aug 2021 15:33:23 GMT">
											<outline text="const message = &quot;The request returned a status code of &quot; + response.statusCode + &quot;.&quot;;" created="Sun, 08 Aug 2021 15:34:06 GMT"/>
											<outline text="sendBackError (message);" created="Sun, 08 Aug 2021 15:34:43 GMT"/>
											<outline text="}" created="Sun, 08 Aug 2021 15:33:28 GMT"/>
											</outline>
										<outline text="else {" created="Sun, 08 Aug 2021 15:33:29 GMT">
											<outline text="try {" created="Tue, 29 Nov 2022 17:25:23 GMT">
												<outline text="callback (undefined, JSON.parse (jsontext))"/>
												<outline text="}" created="Tue, 29 Nov 2022 17:25:25 GMT"/>
												</outline>
											<outline text="catch (err) {" created="Tue, 29 Nov 2022 17:25:26 GMT">
												<outline text="callback (err);" created="Sun, 08 Aug 2021 15:33:17 GMT"/>
												<outline text="}" created="Tue, 29 Nov 2022 17:25:29 GMT"/>
												</outline>
											<outline text="}" created="Sun, 08 Aug 2021 15:33:31 GMT"/>
											</outline>
										<outline text="}" created="Sun, 08 Aug 2021 15:33:33 GMT"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}" created="Mon, 21 Nov 2022 13:39:58 GMT"/>
								</outline>
							<outline text="function mastopost (path, params, callback) {" created="Mon, 21 Nov 2022 12:36:03 GMT">
								<outline text="Changes" isComment="true" created="Mon, 21 Nov 2022 12:40:54 GMT">
									<outline text="12/4/22; 8:44:05 AM by DW" created="Sun, 04 Dec 2022 13:44:05 GMT">
										<outline text="Removed body param, we're now using the body ourselves. " created="Sun, 04 Dec 2022 13:44:05 GMT"/>
										</outline>
									<outline text="11/21/22; 7:40:57 AM by DW" created="Mon, 21 Nov 2022 12:40:56 GMT">
										<outline text="Created. " created="Mon, 21 Nov 2022 12:40:57 GMT"/>
										</outline>
									</outline>
								<outline text="const theRequest = {">
									<outline text="url: config.masto.urlMastodonServer + path,"/>
									<outline text="method: &quot;POST&quot;,"/>
									<outline text="followAllRedirects: true, //12/3/22 by DW" created="Thu, 31 Jul 2014 16:39:18 GMT" pgfnum="43069"/>
									<outline text="maxRedirects: 5,"/>
									<outline text="headers: {">
										<outline text="&quot;Authorization&quot;: &quot;Bearer &quot; + config.masto.accessToken,"/>
										<outline text="&quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;" created="Sun, 04 Dec 2022 13:43:35 GMT"/>
										<outline text="},"/>
										</outline>
									<outline text="body: buildParamList (params)" created="Sun, 20 Nov 2022 22:11:40 GMT"/>
									<outline text="};"/>
									</outline>
								<outline text="console.log (&quot;mastopost: theRequest == &quot; + utils.jsonStringify (theRequest));" isComment="true" created="Wed, 23 Nov 2022 20:58:23 GMT"/>
								<outline text="request (theRequest, function (err, response, jsontext) {">
									<outline text="if (err) {" created="Sun, 08 Aug 2021 15:33:13 GMT">
										<outline text="console.log (&quot;mastopost: err.message == &quot; + err.message);" created="Wed, 23 Nov 2022 20:58:23 GMT"/>
										<outline text="callback (err);" created="Sun, 08 Aug 2021 15:33:17 GMT"/>
										<outline text="}" created="Sun, 08 Aug 2021 15:33:20 GMT"/>
										</outline>
									<outline text="else {" created="Sun, 08 Aug 2021 15:33:21 GMT">
										<outline text="var code = response.statusCode;" created="Tue, 04 Jan 2022 22:39:15 GMT"/>
										<outline text="console.log (&quot;mastopost: response.statusCode == &quot; + response.statusCode);" isComment="true" created="Wed, 23 Nov 2022 20:58:23 GMT"/>
										<outline text="if ((code &lt; 200) || (code &gt; 299)) {" created="Sun, 08 Aug 2021 15:33:23 GMT">
											<outline text="const message = &quot;The request returned a status code of &quot; + response.statusCode + &quot;.&quot;;" created="Sun, 08 Aug 2021 15:34:06 GMT"/>
											<outline text="callback ({message});" created="Sun, 08 Aug 2021 15:34:43 GMT"/>
											<outline text="}" created="Sun, 08 Aug 2021 15:33:28 GMT"/>
											</outline>
										<outline text="else {" created="Sun, 08 Aug 2021 15:33:29 GMT">
											<outline text="try {" created="Tue, 29 Nov 2022 17:25:23 GMT">
												<outline text="callback (undefined, JSON.parse (jsontext))"/>
												<outline text="}" created="Tue, 29 Nov 2022 17:25:25 GMT"/>
												</outline>
											<outline text="catch (err) {" created="Tue, 29 Nov 2022 17:25:26 GMT">
												<outline text="callback (err);" created="Sun, 08 Aug 2021 15:33:17 GMT"/>
												<outline text="}" created="Tue, 29 Nov 2022 17:25:29 GMT"/>
												</outline>
											<outline text="}" created="Sun, 08 Aug 2021 15:33:31 GMT"/>
											</outline>
										<outline text="}" created="Sun, 08 Aug 2021 15:33:33 GMT"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}" created="Mon, 21 Nov 2022 12:36:39 GMT"/>
								</outline>
							<outline text="function getUserInfo (callback) {" created="Mon, 21 Nov 2022 13:38:24 GMT">
								<outline text="mastocall (&quot;api/v1/accounts/verify_credentials&quot;, undefined, callback);" created="Mon, 21 Nov 2022 13:44:47 GMT"/>
								<outline text="}" created="Mon, 21 Nov 2022 13:38:32 GMT"/>
								</outline>
							<outline text="function tootStatus (statusText, inReplyTo, callback) {" created="Sun, 20 Nov 2022 22:02:32 GMT">
								<outline text="Changes" isComment="true" created="Wed, 30 Nov 2022 15:40:47 GMT">
									<outline text="11/30/22; 10:40:50 AM by DW" created="Wed, 30 Nov 2022 15:40:49 GMT">
										<outline text="This is the info we get back when creating a new status message." created="Wed, 30 Nov 2022 15:40:50 GMT">
											<outline text="{">
												<outline text="id: '109433246572276107',"/>
												<outline text="created_at: '2022-11-30T14:33:45.883Z',"/>
												<outline text="in_reply_to_id: null,"/>
												<outline text="in_reply_to_account_id: null,"/>
												<outline text="sensitive: false,"/>
												<outline text="spoiler_text: '',"/>
												<outline text="visibility: 'public',"/>
												<outline text="language: 'en',"/>
												<outline text="uri: 'https://social.masto.land/users/dave/statuses/109433246572276107',"/>
												<outline text="url: 'https://social.masto.land/@dave/109433246572276107',"/>
												<outline text="replies_count: 0,"/>
												<outline text="reblogs_count: 0,"/>
												<outline text="favourites_count: 0,"/>
												<outline text="edited_at: null,"/>
												<outline text="favourited: false,"/>
												<outline text="reblogged: false,"/>
												<outline text="muted: false,"/>
												<outline text="bookmarked: false,"/>
												<outline text="pinned: false,"/>
												<outline text="local_only: false,"/>
												<outline text="content: '&lt;p&gt;&lt;em&gt;This is a test. This came out of the archive of my blog. None of this happened today or yesterday. Still diggin!&lt;/em&gt;&lt;/p&gt;&lt;h1&gt;Using Twitter for identity&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://scripting.com/2022/11/30/143027.html?title=usingTwitterForIdentity&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;scripting.com/2022/11/30/14302&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;7.html?title=usingTwitterForIdentity&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;',"/>
												<outline text="filtered: [],"/>
												<outline text="reblog: null,"/>
												<outline text="application: { name: 'feedToMasto', website: null },"/>
												<outline text="account: {">
													<outline text="id: '109405094861978906',"/>
													<outline text="username: 'dave',"/>
													<outline text="acct: 'dave',"/>
													<outline text="display_name: &quot;Dave Winer's linkblog in Masto&quot;,"/>
													<outline text="locked: false,"/>
													<outline text="bot: false,"/>
													<outline text="discoverable: false,"/>
													<outline text="group: false,"/>
													<outline text="created_at: '2022-11-25T00:00:00.000Z',"/>
													<outline text="note: '',"/>
													<outline text="url: 'https://social.masto.land/@dave',"/>
													<outline text="avatar: 'https://social.masto.land/system/accounts/avatars/109/405/094/861/978/906/original/ba1994629374761a.png',"/>
													<outline text="avatar_static: 'https://social.masto.land/system/accounts/avatars/109/405/094/861/978/906/original/ba1994629374761a.png',"/>
													<outline text="header: 'https://social.masto.land/system/accounts/headers/109/405/094/861/978/906/original/d1d4f4f073727c1e.png',"/>
													<outline text="header_static: 'https://social.masto.land/system/accounts/headers/109/405/094/861/978/906/original/d1d4f4f073727c1e.png',"/>
													<outline text="followers_count: 84,"/>
													<outline text="following_count: 2,"/>
													<outline text="statuses_count: 96,"/>
													<outline text="last_status_at: '2022-11-30',"/>
													<outline text="noindex: false,"/>
													<outline text="emojis: [],"/>
													<outline text="fields: []"/>
													</outline>
												<outline text="},"/>
												<outline text="media_attachments: [],"/>
												<outline text="mentions: [],"/>
												<outline text="tags: [],"/>
												<outline text="emojis: [],"/>
												<outline text="card: null,"/>
												<outline text="poll: null"/>
												</outline>
											<outline text="}"/>
											</outline>
										</outline>
									</outline>
								<outline text="const params = {" created="Mon, 21 Nov 2022 14:39:03 GMT">
									<outline text="status: statusText," created="Mon, 21 Nov 2022 14:39:18 GMT"/>
									<outline text="in_reply_to_id: inReplyTo" created="Mon, 21 Nov 2022 14:39:20 GMT"/>
									<outline text="};" created="Mon, 21 Nov 2022 14:39:09 GMT"/>
									</outline>
								<outline text="console.log (&quot;tootStatus: statusText == &quot; + statusText + &quot;, inReplyTo == &quot; + inReplyTo);" isComment="true" created="Mon, 21 Nov 2022 14:44:46 GMT"/>
								<outline text="mastopost (&quot;api/v1/statuses&quot;, params, callback);" created="Mon, 21 Nov 2022 12:45:43 GMT"/>
								<outline text="}" created="Sun, 20 Nov 2022 22:02:56 GMT"/>
								</outline>
							<outline text="const statustext = getStatusText (item, config.masto.maxCtChars); //5/12/23 by DW" created="Fri, 12 May 2023 12:41:40 GMT"/>
							<outline text="tootStatus (statustext, undefined, function (err, data) {" created="Mon, 28 Nov 2022 23:55:29 GMT">
								<outline text="if (err) {" created="Mon, 28 Nov 2022 23:55:53 GMT">
									<outline text="console.log (err.message);" created="Mon, 28 Nov 2022 23:56:04 GMT"/>
									<outline text="}" created="Mon, 28 Nov 2022 23:55:57 GMT"/>
									</outline>
								<outline text="else {" created="Mon, 28 Nov 2022 23:55:58 GMT">
									<outline text="console.log (new Date ().toLocaleTimeString () + &quot;: &quot; + data.url);" created="Mon, 28 Nov 2022 23:11:45 GMT"/>
									<outline text="}" created="Mon, 28 Nov 2022 23:56:00 GMT"/>
									</outline>
								<outline text="});" created="Mon, 28 Nov 2022 23:55:47 GMT"/>
								</outline>
							<outline text="}" created="Sat, 13 May 2023 15:17:24 GMT"/>
							</outline>
						<outline text="}" created="Mon, 28 Nov 2022 23:39:57 GMT"/>
						</outline>
					</outline>
				<outline text="//bluesky" created="Fri, 12 May 2023 12:37:28 GMT">
					<outline text="function blueskyPostNewItem (item) {" created="Fri, 12 May 2023 12:39:35 GMT">
						<outline text="Changes" isComment="true" created="Fri, 12 May 2023 22:00:52 GMT">
							<outline text="5/12/23; 6:00:55 PM by DW" created="Fri, 12 May 2023 22:00:54 GMT">
								<outline text="We can't use getStatusTextx for bluesky because it's doing funky stuff with links. " created="Fri, 12 May 2023 22:00:56 GMT"/>
								</outline>
							</outline>
						<outline text="if (utils.getBoolean (config.bluesky.enabled)) {" created="Sat, 13 May 2023 15:18:24 GMT">
							<outline text="function getAccessToken (options, callback) {">
								<outline text="const url = options.urlsite + &quot;xrpc/com.atproto.server.createSession&quot;;" created="Mon, 08 May 2023 14:59:04 GMT"/>
								<outline text="const bodystruct = {" created="Mon, 08 May 2023 17:15:55 GMT">
									<outline text="identifier: options.mailaddress," created="Mon, 08 May 2023 17:16:37 GMT"/>
									<outline text="password: options.password" created="Mon, 08 May 2023 17:16:55 GMT"/>
									<outline text="};" created="Mon, 08 May 2023 17:16:28 GMT"/>
									</outline>
								<outline text="var theRequest = {">
									<outline text="method: &quot;POST&quot;,"/>
									<outline text="url: url,"/>
									<outline text="body: utils.jsonStringify (bodystruct),"/>
									<outline text="headers: {">
										<outline text="&quot;User-Agent&quot;: options.userAgent,"/>
										<outline text="&quot;Content-Type&quot;: &quot;application/json&quot;" created="Mon, 08 May 2023 17:14:51 GMT"/>
										<outline text="}"/>
										</outline>
									<outline text="};"/>
									</outline>
								<outline text="console.log (&quot;getAccessToken: theRequest == &quot; + utils.jsonStringify (theRequest));" isComment="true" created="Mon, 08 May 2023 17:27:33 GMT"/>
								<outline text="request (theRequest, function (err, response, body) { ">
									<outline text="var jstruct = undefined;"/>
									<outline text="if (err) {">
										<outline text="callback (err);"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="try {">
											<outline text="console.log (&quot;newBlueskyPost: body == &quot; + body);" isComment="true" created="Mon, 08 May 2023 15:10:34 GMT"/>
											<outline text="callback (undefined, JSON.parse (body));"/>
											<outline text="}"/>
											</outline>
										<outline text="catch (err) {">
											<outline text="callback (err);"/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="function newPost (options, authorization, item, callback) {">
								<outline text="const url = options.urlsite + &quot;xrpc/com.atproto.repo.createRecord&quot;;" created="Mon, 08 May 2023 14:59:04 GMT"/>
								<outline text="const nowstring = new Date ().toISOString ();" created="Mon, 08 May 2023 19:16:51 GMT"/>
								<outline text="" created="Fri, 12 May 2023 22:13:26 GMT"/>
								<outline text="function notEmpty (s) {" created="Fri, 12 May 2023 21:51:38 GMT">
									<outline text="if (s === undefined) {" created="Fri, 12 May 2023 21:51:47 GMT">
										<outline text="return (false);" created="Fri, 12 May 2023 21:52:15 GMT"/>
										<outline text="}" created="Fri, 12 May 2023 21:52:02 GMT"/>
										</outline>
									<outline text="if (s.length == 0) {" created="Fri, 12 May 2023 21:52:21 GMT">
										<outline text="return (false);" created="Fri, 12 May 2023 21:52:33 GMT"/>
										<outline text="}" created="Fri, 12 May 2023 21:52:30 GMT"/>
										</outline>
									<outline text="return (true);" created="Fri, 12 May 2023 21:52:41 GMT"/>
									<outline text="}" created="Fri, 12 May 2023 21:51:46 GMT"/>
									</outline>
								<outline text="function decodeForBluesky (s) {" created="Sat, 13 May 2023 15:52:13 GMT">
									<outline text="var replacetable = {">
										<outline text="&quot;#39&quot;: &quot;'&quot;"/>
										<outline text="};"/>
										</outline>
									<outline text="s = utils.multipleReplaceAll (s, replacetable, true, &quot;&amp;&quot;, &quot;;&quot;);" created="Wed, 06 Nov 2013 17:58:18 GMT" pgfnum="31057"/>
									<outline text="return (s);"/>
									<outline text="}" created="Sat, 13 May 2023 15:52:23 GMT"/>
									</outline>
								<outline text="function getStatusText (item) { //special for bluesky, just get the text, no link" created="Fri, 12 May 2023 22:13:26 GMT">
									<outline text="var statustext = &quot;&quot;;" created="Tue, 29 Nov 2022 00:08:18 GMT"/>
									<outline text="function add (s) {" created="Tue, 29 Nov 2022 00:07:39 GMT">
										<outline text="statustext += s;" created="Tue, 29 Nov 2022 00:07:51 GMT"/>
										<outline text="}" created="Tue, 29 Nov 2022 00:08:09 GMT"/>
										</outline>
									<outline text="function addText (desc) {" created="Tue, 29 Nov 2022 18:51:43 GMT">
										<outline text="desc = decodeForBluesky (desc); " created="Sat, 13 May 2023 15:53:49 GMT"/>
										<outline text="desc = utils.trimWhitespace (utils.stripMarkup (desc));" created="Fri, 12 May 2023 21:47:37 GMT"/>
										<outline text="if (desc.length &gt; 0) {" created="Fri, 12 May 2023 21:56:27 GMT">
											<outline text="const maxcount = config.bluesky.maxCtChars - (statustext.length + desc.length + 2); //the 2 is for the two newlines after the description" created="Thu, 01 Dec 2022 21:52:14 GMT"/>
											<outline text="desc = utils.maxStringLength (desc, maxcount, false, true) + &quot;\n\n&quot;;" created="Fri, 12 May 2023 21:57:01 GMT"/>
											<outline text="add (desc);"/>
											<outline text="}" created="Fri, 12 May 2023 21:56:28 GMT"/>
											</outline>
										<outline text="}" created="Tue, 29 Nov 2022 18:51:49 GMT"/>
										</outline>
									<outline text="if (notEmpty (item.title)) {" created="Fri, 12 May 2023 21:45:56 GMT">
										<outline text="addText (item.title);" created="Fri, 12 May 2023 21:46:16 GMT"/>
										<outline text="}" created="Fri, 12 May 2023 21:46:04 GMT"/>
										</outline>
									<outline text="else {" created="Fri, 12 May 2023 21:46:05 GMT">
										<outline text="addText (item.description);" created="Fri, 12 May 2023 21:46:16 GMT"/>
										<outline text="}" created="Fri, 12 May 2023 21:46:07 GMT"/>
										</outline>
									<outline text="return (statustext);" created="Fri, 12 May 2023 12:41:21 GMT"/>
									<outline text="}" created="Fri, 12 May 2023 22:13:38 GMT"/>
									</outline>
								<outline text="function getRecord (item) {" created="Fri, 12 May 2023 22:18:30 GMT">
									<outline text="var theRecord = {" created="Fri, 12 May 2023 22:25:06 GMT">
										<outline text="text: getStatusText (item)," created="Mon, 08 May 2023 19:15:34 GMT"/>
										<outline text="createdAt: nowstring" created="Mon, 08 May 2023 19:15:52 GMT"/>
										<outline text="}" created="Fri, 12 May 2023 22:25:17 GMT"/>
										</outline>
									<outline text="if (notEmpty (item.link)) {" created="Fri, 12 May 2023 22:16:08 GMT">
										<outline text="const linkword = utils.getDomainFromUrl (item.link);" created="Fri, 12 May 2023 22:20:07 GMT"/>
										<outline text="theRecord.text += linkword;" created="Fri, 12 May 2023 22:20:07 GMT"/>
										<outline text="const ctbytes = getStringBytes (theRecord.text); //5/16/23 by DW" created="Tue, 16 May 2023 22:41:37 GMT"/>
										<outline text="theRecord.facets = [" created="Fri, 12 May 2023 22:20:07 GMT">
											<outline text="{" created="Fri, 12 May 2023 22:21:26 GMT">
												<outline text="features: [" created="Fri, 12 May 2023 22:21:38 GMT">
													<outline text="{" created="Fri, 12 May 2023 22:21:53 GMT">
														<outline text="uri: item.link," created="Fri, 12 May 2023 22:22:00 GMT"/>
														<outline text="&quot;$type&quot;: &quot;app.bsky.richtext.facet#link&quot;" created="Fri, 12 May 2023 22:22:07 GMT"/>
														<outline text="}" created="Fri, 12 May 2023 22:21:55 GMT"/>
														</outline>
													<outline text="]," created="Fri, 12 May 2023 22:21:44 GMT"/>
													</outline>
												<outline text="index: {" created="Fri, 12 May 2023 22:22:51 GMT">
													<outline text="byteStart: ctbytes - linkword.length, //5/16/23 by DW" created="Fri, 12 May 2023 22:23:05 GMT"/>
													<outline text="byteEnd: ctbytes" created="Fri, 12 May 2023 22:23:09 GMT"/>
													<outline text="}" created="Fri, 12 May 2023 22:22:55 GMT"/>
													</outline>
												<outline text="}" created="Fri, 12 May 2023 22:21:27 GMT"/>
												</outline>
											<outline text="];" created="Fri, 12 May 2023 22:21:21 GMT"/>
											</outline>
										<outline text="}" created="Fri, 12 May 2023 22:16:15 GMT"/>
										</outline>
									<outline text="console.log (&quot;bluesky/getRecord: theRecord == &quot; + utils.jsonStringify (theRecord));" created="Sat, 13 May 2023 13:42:15 GMT"/>
									<outline text="return (theRecord);" created="Fri, 12 May 2023 22:19:52 GMT"/>
									<outline text="}" created="Fri, 12 May 2023 22:19:11 GMT"/>
									</outline>
								<outline text="function getRecord (item) {" isComment="true" created="Fri, 12 May 2023 22:18:30 GMT">
									<outline text="var theRecord = {" created="Fri, 12 May 2023 22:25:06 GMT">
										<outline text="text: getStatusText (item)," created="Mon, 08 May 2023 19:15:34 GMT"/>
										<outline text="createdAt: nowstring" created="Mon, 08 May 2023 19:15:52 GMT"/>
										<outline text="}" created="Fri, 12 May 2023 22:25:17 GMT"/>
										</outline>
									<outline text="if (notEmpty (item.link)) {" created="Fri, 12 May 2023 22:16:08 GMT">
										<outline text="const linkword = utils.getDomainFromUrl (item.link);" created="Fri, 12 May 2023 22:20:07 GMT"/>
										<outline text="theRecord.text += linkword;" created="Fri, 12 May 2023 22:20:07 GMT"/>
										<outline text="const ctbytes = getStringBytes (theRecord.text);" created="Tue, 16 May 2023 22:41:37 GMT"/>
										<outline text="theRecord.facets = [" created="Fri, 12 May 2023 22:20:07 GMT">
											<outline text="{" created="Fri, 12 May 2023 22:21:26 GMT">
												<outline text="features: [" created="Fri, 12 May 2023 22:21:38 GMT">
													<outline text="{" created="Fri, 12 May 2023 22:21:53 GMT">
														<outline text="uri: item.link," created="Fri, 12 May 2023 22:22:00 GMT"/>
														<outline text="&quot;$type&quot;: &quot;app.bsky.richtext.facet#link&quot;" created="Fri, 12 May 2023 22:22:07 GMT"/>
														<outline text="}" created="Fri, 12 May 2023 22:21:55 GMT"/>
														</outline>
													<outline text="]," created="Fri, 12 May 2023 22:21:44 GMT"/>
													</outline>
												<outline text="index: {" created="Fri, 12 May 2023 22:22:51 GMT">
													<outline text="byteStart: theRecord.text.length - linkword.length," created="Fri, 12 May 2023 22:23:05 GMT"/>
													<outline text="byteEnd: theRecord.text.length" created="Fri, 12 May 2023 22:23:09 GMT"/>
													<outline text="}" created="Fri, 12 May 2023 22:22:55 GMT"/>
													</outline>
												<outline text="}" created="Fri, 12 May 2023 22:21:27 GMT"/>
												</outline>
											<outline text="];" created="Fri, 12 May 2023 22:21:21 GMT"/>
											</outline>
										<outline text="}" created="Fri, 12 May 2023 22:16:15 GMT"/>
										</outline>
									<outline text="console.log (&quot;bluesky/getRecord: theRecord == &quot; + utils.jsonStringify (theRecord));" created="Sat, 13 May 2023 13:42:15 GMT"/>
									<outline text="return (theRecord);" created="Fri, 12 May 2023 22:19:52 GMT"/>
									<outline text="}" created="Fri, 12 May 2023 22:19:11 GMT"/>
									</outline>
								<outline text="" created="Fri, 12 May 2023 22:18:31 GMT"/>
								<outline text="const bodystruct = {" created="Mon, 08 May 2023 17:15:55 GMT">
									<outline text="repo: authorization.did," created="Mon, 08 May 2023 19:14:44 GMT"/>
									<outline text="collection: &quot;app.bsky.feed.post&quot;," created="Mon, 08 May 2023 19:15:06 GMT"/>
									<outline text="validate: true," created="Mon, 08 May 2023 19:15:09 GMT"/>
									<outline text="record: getRecord (item)" created="Fri, 12 May 2023 22:24:47 GMT"/>
									<outline text="};" created="Mon, 08 May 2023 17:16:28 GMT"/>
									</outline>
								<outline text="var theRequest = {">
									<outline text="method: &quot;POST&quot;,"/>
									<outline text="url: url,"/>
									<outline text="body: utils.jsonStringify (bodystruct),"/>
									<outline text="headers: {">
										<outline text="&quot;User-Agent&quot;: options.userAgent,"/>
										<outline text="&quot;Content-Type&quot;: &quot;application/json&quot;," created="Mon, 08 May 2023 17:14:51 GMT"/>
										<outline text="Authorization: &quot;Bearer &quot; + authorization.accessJwt" created="Mon, 08 May 2023 17:14:51 GMT"/>
										<outline text="}"/>
										</outline>
									<outline text="};"/>
									</outline>
								<outline text="request (theRequest, function (err, response, body) { ">
									<outline text="if (err) {">
										<outline text="callback (err);"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="try {">
											<outline text="console.log (&quot;newBlueskyPost: body == &quot; + body);" isComment="true" created="Mon, 08 May 2023 15:10:34 GMT"/>
											<outline text="callback (undefined, JSON.parse (body));"/>
											<outline text="}"/>
											</outline>
										<outline text="catch (err) {">
											<outline text="callback (err);"/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="getAccessToken (config.bluesky, function (err, authorization) {" created="Mon, 08 May 2023 17:20:02 GMT">
								<outline text="if (err) {" created="Mon, 08 May 2023 14:59:49 GMT">
									<outline text="console.log (&quot;blueskyPostNewItem: err.message == &quot; + err.message);" created="Mon, 08 May 2023 14:59:52 GMT"/>
									<outline text="}" created="Mon, 08 May 2023 14:59:57 GMT"/>
									</outline>
								<outline text="else {" created="Mon, 08 May 2023 14:59:58 GMT">
									<outline text="console.log (&quot;blueskyPostNewItem: authorization == &quot; + utils.jsonStringify (authorization));" isComment="true" created="Mon, 08 May 2023 14:59:52 GMT"/>
									<outline text="newPost (config.bluesky, authorization, item, function (err, data) {" created="Mon, 08 May 2023 19:19:50 GMT">
										<outline text="if (err) {" created="Mon, 08 May 2023 14:59:49 GMT">
											<outline text="console.log (&quot;blueskyPostNewItem: err.message == &quot; + err.message);" created="Mon, 08 May 2023 14:59:52 GMT"/>
											<outline text="}" created="Mon, 08 May 2023 14:59:57 GMT"/>
											</outline>
										<outline text="else {" created="Mon, 08 May 2023 19:20:38 GMT">
											<outline text="console.log (&quot;blueskyPostNewItem: data == &quot; + utils.jsonStringify (data));" isComment="true" created="Mon, 08 May 2023 14:59:52 GMT"/>
											<outline text="}" created="Mon, 08 May 2023 19:20:40 GMT"/>
											</outline>
										<outline text="});" created="Mon, 08 May 2023 19:20:31 GMT"/>
										</outline>
									<outline text="}" created="Mon, 08 May 2023 15:05:33 GMT"/>
									</outline>
								<outline text="});" created="Mon, 08 May 2023 17:20:09 GMT"/>
								</outline>
							<outline text="}" created="Sat, 13 May 2023 15:18:25 GMT"/>
							</outline>
						<outline text="}" created="Fri, 12 May 2023 12:43:37 GMT"/>
						</outline>
					</outline>
				<outline text="//wordpress -- 5/14/23 by DW" created="Sun, 14 May 2023 15:19:40 GMT">
					<outline text="function wordpressPostNewItem (item) {" created="Sun, 14 May 2023 15:19:40 GMT">
						<outline text="if (utils.getBoolean (config.wordpress.enabled)) {" created="Sun, 14 May 2023 15:22:37 GMT">
							<outline text="const client = wordpress.createClient ({">
								<outline text="url: config.wordpress.urlsite,"/>
								<outline text="username: config.wordpress.username,"/>
								<outline text="password: config.wordpress.password"/>
								<outline text="});"/>
								</outline>
							<outline text="" created="Sun, 14 May 2023 15:28:11 GMT"/>
							<outline text="function getPostInfo (client, idPost, callback) {" created="Sun, 23 Apr 2023 15:27:20 GMT">
								<outline text="client.getPost (idPost, function (err, thePost) {" created="Sun, 23 Apr 2023 15:08:51 GMT">
									<outline text="if (err) {" created="Sun, 23 Apr 2023 15:10:04 GMT">
										<outline text="callback (err);" created="Sun, 23 Apr 2023 15:30:14 GMT"/>
										<outline text="}" created="Sun, 23 Apr 2023 15:10:12 GMT"/>
										</outline>
									<outline text="else {" created="Sun, 23 Apr 2023 15:10:13 GMT">
										<outline text="callback (undefined, thePost);" created="Sun, 23 Apr 2023 15:30:19 GMT"/>
										<outline text="}" created="Sun, 23 Apr 2023 15:10:17 GMT"/>
										</outline>
									<outline text="});" created="Sun, 23 Apr 2023 15:10:01 GMT"/>
									</outline>
								<outline text="}" created="Sun, 23 Apr 2023 15:42:11 GMT"/>
								</outline>
							<outline text="function newPost (client, title, content, link, callback) {" created="Sun, 23 Apr 2023 15:27:20 GMT">
								<outline text="if (link !== undefined) {" created="Sun, 14 May 2023 15:54:06 GMT">
									<outline text="content += &quot;\n\n&quot; + link;" created="Sun, 14 May 2023 15:54:19 GMT"/>
									<outline text="}" created="Sun, 14 May 2023 15:54:13 GMT"/>
									</outline>
								<outline text="" created="Sun, 14 May 2023 15:54:06 GMT"/>
								<outline text="const thePost = {" created="Sun, 23 Apr 2023 15:08:51 GMT">
									<outline text="title, "/>
									<outline text="content," created="Sun, 23 Apr 2023 15:32:42 GMT"/>
									<outline text="status: &quot;publish&quot; //omit this to create a draft that isn't published" created="Sun, 23 Apr 2023 15:23:39 GMT"/>
									<outline text="};" created="Sun, 23 Apr 2023 15:08:57 GMT"/>
									</outline>
								<outline text="client.newPost (thePost, function (err, idNewPost) {" created="Sun, 23 Apr 2023 15:08:51 GMT">
									<outline text="if (err) {" created="Sun, 23 Apr 2023 15:10:04 GMT">
										<outline text="callback (err);" created="Sun, 23 Apr 2023 15:30:14 GMT"/>
										<outline text="}" created="Sun, 23 Apr 2023 15:10:12 GMT"/>
										</outline>
									<outline text="else {" created="Sun, 23 Apr 2023 15:10:13 GMT">
										<outline text="thePost.idNewPost = idNewPost;" isComment="true" created="Sun, 23 Apr 2023 15:30:36 GMT"/>
										<outline text="getPostInfo (client, idNewPost, function (err, theNewPost) {" created="Sun, 23 Apr 2023 15:44:20 GMT">
											<outline text="if (err) {" created="Sun, 23 Apr 2023 15:44:56 GMT">
												<outline text="callback (err);" created="Sun, 23 Apr 2023 15:44:59 GMT"/>
												<outline text="}" created="Sun, 23 Apr 2023 15:45:02 GMT"/>
												</outline>
											<outline text="else {" created="Sun, 23 Apr 2023 15:45:02 GMT">
												<outline text="callback (undefined, theNewPost);" created="Sun, 23 Apr 2023 15:45:04 GMT"/>
												<outline text="}" created="Sun, 23 Apr 2023 15:45:09 GMT"/>
												</outline>
											<outline text="});" created="Sun, 23 Apr 2023 15:44:32 GMT"/>
											</outline>
										<outline text="}" created="Sun, 23 Apr 2023 15:10:17 GMT"/>
										</outline>
									<outline text="});" created="Sun, 23 Apr 2023 15:10:01 GMT"/>
									</outline>
								<outline text="}" created="Sun, 23 Apr 2023 15:27:52 GMT"/>
								</outline>
							<outline text="" created="Sun, 14 May 2023 15:27:35 GMT"/>
							<outline text="newPost (client, item.title, item.description, item.link, function (err, thePost) {" created="Sun, 23 Apr 2023 15:30:57 GMT">
								<outline text="if (err) {" created="Sun, 23 Apr 2023 15:10:04 GMT">
									<outline text="console.log (&quot;wordpressPostNewItem: err.message == &quot; + err.message);" created="Sun, 23 Apr 2023 15:10:07 GMT"/>
									<outline text="}" created="Sun, 23 Apr 2023 15:10:12 GMT"/>
									</outline>
								<outline text="else {" created="Sun, 23 Apr 2023 15:10:13 GMT">
									<outline text="console.log (&quot;wordpressPostNewItem: thePost.link == &quot; + thePost.link);" created="Sun, 23 Apr 2023 15:10:07 GMT"/>
									<outline text="}" created="Sun, 23 Apr 2023 15:10:17 GMT"/>
									</outline>
								<outline text="});" created="Sun, 23 Apr 2023 15:31:23 GMT"/>
								</outline>
							<outline text="}" created="Sun, 14 May 2023 15:22:38 GMT"/>
							</outline>
						<outline text="}" created="Sun, 14 May 2023 15:21:47 GMT"/>
						</outline>
					</outline>
				<outline text="" created="Sun, 14 May 2023 15:19:41 GMT"/>
				<outline text="function checkFeed (feedUrl, callback) {" created="Mon, 28 Nov 2022 23:05:38 GMT">
					<outline text="const flNewFeed = isNewFeed (feedUrl);" created="Tue, 29 Nov 2022 18:01:13 GMT"/>
					<outline text="var flPost = (flNewFeed &amp;&amp; config.flOnlyPostNewItems) ? false : true;" created="Tue, 29 Nov 2022 18:04:25 GMT"/>
					<outline text="console.log (&quot;checkFeed: feedUrl == &quot; + feedUrl);" isComment="true" created="Mon, 28 Nov 2022 23:13:34 GMT"/>
					<outline text="reallysimple.readFeed (feedUrl, function (err, theFeed) {" created="Sat, 19 Mar 2022 15:14:01 GMT">
						<outline text="if (err) {" created="Sat, 19 Mar 2022 15:15:11 GMT">
							<outline text="callback (err);" created="Sat, 19 Mar 2022 15:15:16 GMT"/>
							<outline text="}" created="Sat, 19 Mar 2022 15:15:20 GMT"/>
							</outline>
						<outline text="else {" created="Sat, 19 Mar 2022 15:15:21 GMT">
							<outline text="theFeed.items.forEach (function (item) {" created="Mon, 28 Nov 2022 23:19:30 GMT">
								<outline text="if (item.guid !== undefined) { //we ignore items without guids" created="Mon, 28 Nov 2022 23:33:13 GMT">
									<outline text="var flfound = false;" created="Mon, 28 Nov 2022 23:34:32 GMT"/>
									<outline text="for (var x in stats.guids) {" created="Tue, 29 Nov 2022 17:56:37 GMT">
										<outline text="if (x == item.guid) {" created="Mon, 28 Nov 2022 23:35:02 GMT">
											<outline text="flfound = true;" created="Mon, 28 Nov 2022 23:35:09 GMT"/>
											<outline text="break;" created="Tue, 29 Nov 2022 17:57:04 GMT"/>
											<outline text="}" created="Mon, 28 Nov 2022 23:35:12 GMT"/>
											</outline>
										<outline text="}" created="Tue, 29 Nov 2022 17:56:45 GMT"/>
										</outline>
									<outline text="if (!flfound) {" created="Mon, 28 Nov 2022 23:35:26 GMT">
										<outline text="stats.guids [item.guid] = {" created="Tue, 29 Nov 2022 17:52:30 GMT">
											<outline text="when: new Date ()," created="Tue, 29 Nov 2022 17:53:26 GMT"/>
											<outline text="feedUrl" created="Tue, 29 Nov 2022 17:53:40 GMT"/>
											<outline text="};" created="Tue, 29 Nov 2022 17:53:12 GMT"/>
											</outline>
										<outline text="statsChanged ();" created="Mon, 28 Nov 2022 23:35:55 GMT"/>
										<outline text="if (flPost) {" created="Tue, 29 Nov 2022 18:04:14 GMT">
											<outline text="mastoPostNewItem (item);" created="Mon, 28 Nov 2022 23:39:23 GMT"/>
											<outline text="blueskyPostNewItem (item); //5/12/23 by DW" created="Fri, 12 May 2023 13:04:22 GMT"/>
											<outline text="wordpressPostNewItem (item); //5/14/23 by DW"/>
											<outline text="saveItemForDebugging (item);  //5/12/23 by DW" created="Fri, 12 May 2023 14:48:26 GMT"/>
											<outline text="}" created="Tue, 29 Nov 2022 18:19:14 GMT"/>
											</outline>
										<outline text="}" created="Mon, 28 Nov 2022 23:35:30 GMT"/>
										</outline>
									<outline text="}" created="Mon, 28 Nov 2022 23:33:50 GMT"/>
									</outline>
								<outline text="});" created="Mon, 28 Nov 2022 23:19:54 GMT"/>
								</outline>
							<outline text="}" created="Sat, 19 Mar 2022 15:15:23 GMT"/>
							</outline>
						<outline text="});" created="Sat, 19 Mar 2022 15:15:01 GMT"/>
						</outline>
					<outline text="}" created="Mon, 28 Nov 2022 23:05:53 GMT"/>
					</outline>
				<outline text="function writeStats () {" created="Wed, 30 Nov 2022 15:47:36 GMT">
					<outline text="fs.writeFile (fnameStats, utils.jsonStringify (stats), function (err) {" created="Mon, 28 Nov 2022 23:30:59 GMT">
						<outline text="});" created="Mon, 28 Nov 2022 23:31:31 GMT"/>
						</outline>
					<outline text="}" created="Wed, 30 Nov 2022 15:47:44 GMT"/>
					</outline>
				<outline text="function checkFeeds () {" created="Fri, 02 Dec 2022 18:02:16 GMT">
					<outline text="if (config.enabled) { //5/12/23 by DW" created="Wed, 30 Nov 2022 15:53:01 GMT">
						<outline text="whenLastCheck = new Date ();" created="Mon, 28 Nov 2022 23:10:34 GMT"/>
						<outline text="config.feeds.forEach (function (feedUrl) {" created="Mon, 28 Nov 2022 23:10:39 GMT">
							<outline text="checkFeed (feedUrl, function (err, data) {" created="Mon, 28 Nov 2022 23:11:03 GMT">
								<outline text="if (err) {" created="Mon, 28 Nov 2022 23:11:35 GMT">
									<outline text="console.log (&quot;everySecond: feedUrl == &quot; +feedUrl + &quot;, err.message == &quot; + err.message);" created="Mon, 28 Nov 2022 23:11:45 GMT"/>
									<outline text="}" created="Mon, 28 Nov 2022 23:11:38 GMT"/>
									</outline>
								<outline text="});" created="Mon, 28 Nov 2022 23:11:27 GMT"/>
								</outline>
							<outline text="});" created="Mon, 28 Nov 2022 23:10:57 GMT"/>
							</outline>
						<outline text="}" created="Wed, 30 Nov 2022 15:53:08 GMT"/>
						</outline>
					<outline text="}" created="Fri, 02 Dec 2022 18:02:21 GMT"/>
					</outline>
				<outline text="" created="Mon, 17 Apr 2023 20:09:11 GMT"/>
				<outline text="function startCloud () { //4/17/23 by DW" isComment="true" created="Mon, 17 Apr 2023 20:09:11 GMT">
					<outline text="if (config.flHttpEnabled) {" created="Mon, 17 Apr 2023 20:36:42 GMT">
						<outline text="const options = {">
							<outline text="port: config.port,"/>
							<outline text="flPingEnabled: true," created="Mon, 17 Apr 2023 20:42:25 GMT"/>
							<outline text="feedUpdatedCallback: checkFeed"/>
							<outline text="};"/>
							</outline>
						<outline text="feedread.startCloud (options);"/>
						<outline text="}" created="Mon, 17 Apr 2023 20:36:45 GMT"/>
						</outline>
					<outline text="}" created="Mon, 17 Apr 2023 20:09:16 GMT"/>
					</outline>
				<outline text="function startSocket () { //4/18/23 by DW" created="Tue, 18 Apr 2023 14:52:21 GMT">
					<outline text="function wsConnectUserToServer (itemReceivedCallback) {">
						<outline text="Changes" isComment="true" created="Sun, 16 Oct 2022 13:29:31 GMT">
							<outline text="10/29/22; 11:07:01 AM by DW" created="Sat, 29 Oct 2022 15:07:01 GMT">
								<outline text="Only send initial message to server if we're signed in." created="Sat, 29 Oct 2022 15:07:01 GMT"/>
								</outline>
							<outline text="10/23/22; 10:27:57 AM by DW" created="Sun, 23 Oct 2022 14:27:57 GMT">
								<outline text="I went back on the change of the 16th. What's really needed is to see if the feed the update came from is part of the river currently being displayed, not whether the user is subscribed. I just got a bunch of items added to a news page I was looking at that weren't part of its set, because of the change. It's better to err on the side of not adding something dynamically, than adding something that isn't part of the set. " created="Sun, 23 Oct 2022 14:27:58 GMT"/>
								</outline>
							<outline text="10/16/22; 9:29:33 AM by DW" created="Sun, 16 Oct 2022 13:29:33 GMT">
								<outline text="When receiving an updated item message, we can't rely on the user being subscribed because there are now rivers that have items that the user might not be subscribed to, such as the hotlist and everything rivers. Or other people's rivers! " created="Sun, 16 Oct 2022 13:29:34 GMT"/>
								</outline>
							</outline>
						<outline text="var mySocket = undefined;" created="Wed, 29 Sep 2021 16:20:51 GMT"/>
						<outline text="function checkConnection () {" created="Wed, 29 Sep 2021 16:20:34 GMT">
							<outline text="if (mySocket === undefined) {">
								<outline text="mySocket = new websocket (config.urlSocketServer); "/>
								<outline text="mySocket.onopen = function (evt) {">
									<outline text="if (userIsSignedIn ()) { //10/29/22 by DW" isComment="true" created="Sat, 29 Oct 2022 15:06:21 GMT">
										<outline text="var msg = &quot;user &quot; + localStorage.twOauthToken + &quot; &quot; + localStorage.twOauthTokenSecret;" created="Wed, 29 Sep 2021 16:28:20 GMT"/>
										<outline text="console.log (&quot;wsConnectToServer: msg == &quot; + msg);" isComment="true"/>
										<outline text="mySocket.send (msg);"/>
										<outline text="}" created="Sat, 29 Oct 2022 15:06:27 GMT"/>
										</outline>
									<outline text="};"/>
									</outline>
								<outline text="mySocket.onmessage = function (evt) {">
									<outline text="function getPayload (jsontext) {" created="Mon, 21 Mar 2022 15:32:01 GMT">
										<outline text="var thePayload = undefined;" created="Mon, 21 Mar 2022 15:37:20 GMT"/>
										<outline text="try {" created="Mon, 21 Mar 2022 15:37:20 GMT">
											<outline text="thePayload = JSON.parse (jsontext);" created="Mon, 21 Mar 2022 15:37:23 GMT"/>
											<outline text="}" created="Mon, 21 Mar 2022 15:37:39 GMT"/>
											</outline>
										<outline text="catch (err) {" created="Mon, 21 Mar 2022 15:37:40 GMT">
											<outline text="}" created="Mon, 21 Mar 2022 15:37:44 GMT"/>
											</outline>
										<outline text="return (thePayload);" created="Mon, 21 Mar 2022 15:33:05 GMT"/>
										<outline text="}" created="Mon, 21 Mar 2022 15:32:14 GMT"/>
										</outline>
									<outline text="if (evt.data !== undefined) { //no error">
										<outline text="var theCommand = utils.stringNthField (evt.data, &quot;\r&quot;, 1);" created="Mon, 21 Mar 2022 15:34:02 GMT"/>
										<outline text="var jsontext = utils.stringDelete (evt.data, 1, theCommand.length + 1);" created="Mon, 21 Mar 2022 15:35:15 GMT"/>
										<outline text="var thePayload = getPayload (jsontext);" created="Mon, 21 Mar 2022 15:35:39 GMT"/>
										<outline text="console.log (&quot;wsConnectToServer: theCommand == &quot; + theCommand + &quot;, thePayload == &quot; + jsonStringify (thePayload));" isComment="true"/>
										<outline text="switch (theCommand) {" created="Mon, 20 Dec 2021 16:38:54 GMT">
											<outline text="case &quot;newItem&quot;: " created="Mon, 21 Mar 2022 15:30:32 GMT">
												<outline text="itemReceivedCallback (thePayload);" created="Mon, 21 Nov 2022 21:02:53 GMT"/>
												<outline text="break;" created="Mon, 21 Mar 2022 15:30:46 GMT"/>
												</outline>
											<outline text="}" created="Mon, 20 Dec 2021 16:38:58 GMT"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="};"/>
									</outline>
								<outline text="mySocket.onclose = function (evt) {">
									<outline text="mySocket = undefined;"/>
									<outline text="};"/>
									</outline>
								<outline text="mySocket.onerror = function (evt) {">
									<outline text="console.log (&quot;wsConnectToServer: socket received an error.&quot;);" isComment="true" created="Wed, 31 Mar 2021 14:26:24 GMT"/>
									<outline text="};"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}" created="Wed, 29 Sep 2021 16:20:43 GMT"/>
							</outline>
						<outline text="setInterval (checkConnection, 1000);" created="Wed, 29 Sep 2021 16:20:35 GMT"/>
						<outline text="}"/>
						</outline>
					<outline text="wsConnectUserToServer (function (thePayload) {" created="Tue, 22 Nov 2022 22:07:01 GMT">
						<outline text="config.feeds.forEach (function (feedUrl) {" created="Tue, 18 Apr 2023 15:08:12 GMT">
							<outline text="if (feedUrl == thePayload.theFeed.feedUrl) {" created="Tue, 18 Apr 2023 15:09:01 GMT">
								<outline text="console.log (new Date ().toLocaleTimeString () + &quot;: title == &quot; + thePayload.theFeed.title + &quot;, feedUrl == &quot; + thePayload.theFeed.feedUrl);" created="Fri, 08 Jul 2022 21:06:14 GMT"/>
								<outline text="checkFeed (feedUrl, function (err, data) {" created="Mon, 28 Nov 2022 23:11:03 GMT">
									<outline text="if (err) {" created="Mon, 28 Nov 2022 23:11:35 GMT">
										<outline text="console.log (&quot;startSocket: feedUrl == &quot; +feedUrl + &quot;, err.message == &quot; + err.message);" created="Mon, 28 Nov 2022 23:11:45 GMT"/>
										<outline text="}" created="Mon, 28 Nov 2022 23:11:38 GMT"/>
										</outline>
									<outline text="});" created="Mon, 28 Nov 2022 23:11:27 GMT"/>
									</outline>
								<outline text="}" created="Tue, 18 Apr 2023 15:09:08 GMT"/>
								</outline>
							<outline text="});" created="Tue, 18 Apr 2023 15:08:23 GMT"/>
							</outline>
						<outline text="});" created="Tue, 22 Nov 2022 22:07:28 GMT"/>
						</outline>
					<outline text="}" created="Tue, 18 Apr 2023 14:52:26 GMT"/>
					</outline>
				<outline text="" created="Mon, 17 Apr 2023 20:09:11 GMT"/>
				<outline text="function everyMinute () {" created="Wed, 30 Nov 2022 15:49:21 GMT">
					<outline text="if (utils.secondsSince (whenLastCheck) &gt; config.ctSecsBetwChecks) { //check feeds at most once a minute" created="Mon, 28 Nov 2022 23:10:08 GMT">
						<outline text="checkFeeds ();" created="Fri, 02 Dec 2022 18:03:57 GMT"/>
						<outline text="}" created="Mon, 28 Nov 2022 23:10:29 GMT"/>
						</outline>
					<outline text="deleteOldGuids ();" created="Wed, 30 Nov 2022 15:49:54 GMT"/>
					<outline text="}" created="Wed, 30 Nov 2022 15:49:27 GMT"/>
					</outline>
				<outline text="function everySecond () {" created="Mon, 28 Nov 2022 23:09:58 GMT">
					<outline text="if (flStatsChanged) {" created="Mon, 28 Nov 2022 23:30:53 GMT">
						<outline text="flStatsChanged = false;" created="Mon, 28 Nov 2022 23:30:56 GMT"/>
						<outline text="writeStats ();" created="Wed, 30 Nov 2022 15:47:54 GMT"/>
						<outline text="}" created="Mon, 28 Nov 2022 23:31:43 GMT"/>
						</outline>
					<outline text="}" created="Mon, 28 Nov 2022 23:10:02 GMT"/>
					</outline>
				<outline text="" created="Mon, 21 Nov 2022 21:02:27 GMT"/>
				<outline text="function readConfig (fname, data, callback) {" created="Wed, 16 Nov 2022 15:42:09 GMT">
					<outline text="fs.readFile (fname, function (err, jsontext) {" created="Wed, 16 Nov 2022 15:42:34 GMT">
						<outline text="if (!err) {" created="Wed, 16 Nov 2022 15:42:51 GMT">
							<outline text="var jstruct;" created="Wed, 16 Nov 2022 15:42:50 GMT"/>
							<outline text="try {" created="Wed, 16 Nov 2022 15:43:21 GMT">
								<outline text="jstruct = JSON.parse (jsontext);" created="Wed, 16 Nov 2022 15:43:57 GMT"/>
								<outline text="for (var x in jstruct) {" created="Wed, 16 Nov 2022 15:44:48 GMT">
									<outline text="data [x] = jstruct [x];" created="Wed, 16 Nov 2022 15:44:54 GMT"/>
									<outline text="}" created="Wed, 16 Nov 2022 15:45:01 GMT"/>
									</outline>
								<outline text="}" created="Wed, 16 Nov 2022 15:43:26 GMT"/>
								</outline>
							<outline text="catch (err) {" created="Wed, 16 Nov 2022 15:43:26 GMT">
								<outline text="console.log (&quot;readConfig: fname == &quot; + fname + &quot;, err.message == &quot; + utils.jsonStringify (err.message));" created="Wed, 16 Nov 2022 15:43:30 GMT"/>
								<outline text="}" created="Wed, 16 Nov 2022 15:43:43 GMT"/>
								</outline>
							<outline text="}" created="Wed, 16 Nov 2022 15:42:55 GMT"/>
							</outline>
						<outline text="callback ();" created="Wed, 16 Nov 2022 15:49:59 GMT"/>
						<outline text="});" created="Wed, 16 Nov 2022 15:42:44 GMT"/>
						</outline>
					<outline text="}" created="Wed, 16 Nov 2022 15:42:33 GMT"/>
					</outline>
				<outline text="" created="Fri, 12 May 2023 22:32:21 GMT"/>
				<outline text="function testGetStatusText () {" created="Fri, 12 May 2023 18:15:33 GMT">
					<outline text="const theNum = &quot;8313&quot;;" created="Fri, 12 May 2023 18:18:45 GMT"/>
					<outline text="getDebuggingItem (theNum, function (err, item) {" created="Fri, 12 May 2023 18:17:29 GMT">
						<outline text="if (err) {" created="Fri, 12 May 2023 18:17:43 GMT">
							<outline text="console.log (err.message);" created="Fri, 12 May 2023 18:17:48 GMT"/>
							<outline text="}" created="Fri, 12 May 2023 18:18:05 GMT"/>
							</outline>
						<outline text="else {" created="Fri, 12 May 2023 18:18:14 GMT">
							<outline text="console.log (&quot;testGetStatusText: item == &quot; + utils.jsonStringify (item));" created="Fri, 12 May 2023 18:17:48 GMT"/>
							<outline text="console.log (&quot;testGetStatusText: statustext == &quot; + getStatusText (item));" created="Fri, 12 May 2023 18:17:48 GMT"/>
							<outline text="}" created="Fri, 12 May 2023 18:18:17 GMT"/>
							</outline>
						<outline text="});" created="Fri, 12 May 2023 18:17:42 GMT"/>
						</outline>
					<outline text="}" created="Fri, 12 May 2023 18:15:38 GMT"/>
					</outline>
				<outline text="function testBlueskyPost () {" created="Fri, 12 May 2023 18:15:33 GMT">
					<outline text="const theNum = &quot;8313&quot;;" created="Fri, 12 May 2023 18:18:45 GMT"/>
					<outline text="getDebuggingItem (theNum, function (err, item) {" created="Fri, 12 May 2023 18:17:29 GMT">
						<outline text="if (err) {" created="Fri, 12 May 2023 18:17:43 GMT">
							<outline text="console.log (err.message);" created="Fri, 12 May 2023 18:17:48 GMT"/>
							<outline text="}" created="Fri, 12 May 2023 18:18:05 GMT"/>
							</outline>
						<outline text="else {" created="Fri, 12 May 2023 18:18:14 GMT">
							<outline text="console.log (&quot;testBlueskyPost: item == &quot; + utils.jsonStringify (item));" created="Fri, 12 May 2023 18:17:48 GMT"/>
							<outline text="blueskyPostNewItem (item); " created="Fri, 12 May 2023 13:04:22 GMT"/>
							<outline text="}" created="Fri, 12 May 2023 18:18:17 GMT"/>
							</outline>
						<outline text="});" created="Fri, 12 May 2023 18:17:42 GMT"/>
						</outline>
					<outline text="}" created="Fri, 12 May 2023 18:15:38 GMT"/>
					</outline>
				<outline text="" created="Fri, 12 May 2023 18:14:15 GMT"/>
				<outline text="" created="Fri, 12 May 2023 18:14:15 GMT"/>
				<outline text="function startup () {" created="Fri, 12 May 2023 18:14:15 GMT">
					<outline text="console.log (&quot;startup&quot;);" created="Fri, 12 May 2023 18:14:30 GMT"/>
					<outline text="readConfig (fnameStats, stats, function () {" created="Mon, 21 Nov 2022 21:05:00 GMT">
						<outline text="readConfig (fnameConfig, config, function () {" created="Mon, 21 Nov 2022 21:05:00 GMT">
							<outline text="code for testing" isComment="true" created="Wed, 30 Nov 2022 15:40:03 GMT">
								<outline text="testGetStatusText (); //5/13/23 by DW " created="Fri, 12 May 2023 18:14:46 GMT"/>
								<outline text="testBlueskyPost (); //5/13/23 by DW "/>
								<outline text="" created="Fri, 12 May 2023 18:14:47 GMT"/>
								<outline text="deleteOldGuids ();" isComment="true" created="Wed, 30 Nov 2022 15:40:03 GMT"/>
								<outline text="writeStats ();" isComment="true" created="Wed, 30 Nov 2022 15:47:18 GMT"/>
								<outline text="return;" isComment="true" created="Wed, 30 Nov 2022 15:40:04 GMT"/>
								<outline text="" isComment="true" created="Mon, 28 Nov 2022 23:55:29 GMT"/>
								<outline text="tootStatus (&quot;Hello world #3&quot;, undefined, function (err, data) {" isComment="true" created="Mon, 28 Nov 2022 23:55:29 GMT">
									<outline text="if (err) {" created="Mon, 28 Nov 2022 23:55:53 GMT">
										<outline text="console.log (err.message);" created="Mon, 28 Nov 2022 23:56:04 GMT"/>
										<outline text="}" created="Mon, 28 Nov 2022 23:55:57 GMT"/>
										</outline>
									<outline text="else {" created="Mon, 28 Nov 2022 23:55:58 GMT">
										<outline text="console.log (data);" created="Mon, 28 Nov 2022 23:56:04 GMT"/>
										<outline text="}" created="Mon, 28 Nov 2022 23:56:00 GMT"/>
										</outline>
									<outline text="});" created="Mon, 28 Nov 2022 23:55:47 GMT"/>
									</outline>
								<outline text="getUserInfo (function (err, data) {" isComment="true">
									<outline text="if (err) {" created="Mon, 28 Nov 2022 23:55:53 GMT">
										<outline text="console.log (err.message);" created="Mon, 28 Nov 2022 23:56:04 GMT"/>
										<outline text="}" created="Mon, 28 Nov 2022 23:55:57 GMT"/>
										</outline>
									<outline text="else {" created="Mon, 28 Nov 2022 23:55:58 GMT">
										<outline text="console.log (data);" created="Mon, 28 Nov 2022 23:56:04 GMT"/>
										<outline text="}" created="Mon, 28 Nov 2022 23:56:00 GMT"/>
										</outline>
									<outline text="});" created="Tue, 29 Nov 2022 17:29:41 GMT"/>
									</outline>
								<outline text="return;" isComment="true" created="Mon, 28 Nov 2022 23:56:27 GMT"/>
								</outline>
							<outline text="console.log (&quot;config == &quot; + utils.jsonStringify (config));" created="Mon, 21 Nov 2022 21:08:38 GMT"/>
							<outline text="checkFeeds (); //check at startup"/>
							<outline text="utils.runEveryMinute (everyMinute);" created="Wed, 30 Nov 2022 15:50:13 GMT"/>
							<outline text="setInterval (everySecond, 1000);" created="Mon, 28 Nov 2022 23:13:18 GMT"/>
							<outline text="startCloud (); //4/17/23 by DW" isComment="true" created="Mon, 17 Apr 2023 20:08:52 GMT"/>
							<outline text="startSocket (); //4/18/23 by DW"/>
							<outline text="});" created="Mon, 21 Nov 2022 21:05:01 GMT"/>
							</outline>
						<outline text="});" created="Mon, 21 Nov 2022 21:05:01 GMT"/>
						</outline>
					<outline text="}" created="Fri, 12 May 2023 18:14:20 GMT"/>
					</outline>
				<outline text="startup ();" created="Fri, 12 May 2023 18:14:21 GMT"/>
				<outline text="" created="Fri, 12 May 2023 18:14:15 GMT"/>
				</outline>
			<outline text="readme.md" created="Tue, 29 Nov 2022 14:21:48 GMT">
				<outline text="# feedToMasto">
					<outline text="A Node app that checks a list of feeds periodically, posting new items to Mastodon and/or Bluesky."/>
					</outline>
				<outline text="### Bluesky, WordPress support added" created="Sat, 13 May 2023 14:31:09 GMT">
					<outline text="Where ever you see &quot;Mastodon&quot; in the docs here, replace it in your mind with &quot;Mastodon and/or Bluesky and/or WordPress.&quot;" created="Sat, 13 May 2023 14:31:19 GMT"/>
					<outline text="I've started a separate &lt;a href=&quot;https://github.com/scripting/feedToMasto#using-with-bluesky&quot;&gt;section&lt;/a&gt; below for how to configure this app to post to Bluesky, and a &lt;a href=&quot;https://github.com/scripting/feedToMasto#using-with-wordpress&quot;&gt;section&lt;/a&gt; for WordPress." created="Sat, 13 May 2023 14:32:13 GMT"/>
					</outline>
				<outline text="### Why did you do this?" created="Thu, 01 Dec 2022 14:41:56 GMT">
					<outline text="These are things I believe, or goals I have." created="Thu, 01 Dec 2022 15:36:03 GMT">
						<outline text="* The network of RSS publishers and readers should be part of the Fediverse. feedToMasto enables the flow of RSS content into the Fediverse via Mastodon." created="Thu, 01 Dec 2022 14:42:02 GMT"/>
						<outline text="* To provide good simple working code for the Mastodon API. I had to do too much work to figure out how to get what amounts to a Hello World script up and running. Now you don't have to do all that work. " created="Thu, 01 Dec 2022 14:43:40 GMT"/>
						<outline text="* You should be able to build feed-based utilities without giving any thought to reading feeds. Reading a feed should be as easy as reading a JSON file. This app illustrates how that works, using the &lt;a href=&quot;https://github.com/scripting/reallysimple&quot;&gt;reallySimple package&lt;/a&gt;. " created="Thu, 01 Dec 2022 14:42:18 GMT"/>
						<outline text="* I want to get some code out there into the Mastoverse, to start building a rep in the community. " created="Thu, 01 Dec 2022 14:42:56 GMT"/>
						</outline>
					</outline>
				<outline text="### Requirements" created="Thu, 01 Dec 2022 14:43:22 GMT">
					<outline text="* You will need an account on a Mastodon server. " created="Thu, 01 Dec 2022 14:43:29 GMT"/>
					<outline text="* You will need a place to run a Node.js app. It can run behind a firewall, it does not have to run on a public-facing machine. " created="Thu, 01 Dec 2022 15:49:53 GMT"/>
					<outline text="* You will need one or more feeds, they could be RSS, Atom or RDF. " created="Thu, 01 Dec 2022 14:45:18 GMT"/>
					<outline text="* The feeds must have guids. This app depends on the guids being unique. " created="Thu, 01 Dec 2022 14:45:34 GMT"/>
					<outline text="* To get started &lt;a href=&quot;https://github.com/scripting/feedToMasto/archive/refs/heads/main.zip&quot;&gt;download&lt;/a&gt; the feedToMasto folder. " created="Thu, 01 Dec 2022 15:52:51 GMT"/>
					</outline>
				<outline text="### config.json" created="Thu, 01 Dec 2022 14:46:05 GMT">
					<outline text="Setting up the feedToMasto app is all done in &lt;a href=&quot;https://github.com/scripting/feedToMasto/blob/main/config.json&quot;&gt;config.json&lt;/a&gt;. Open it in a text editor." created="Thu, 01 Dec 2022 14:46:12 GMT"/>
					</outline>
				<outline text="### On your Mastodon account" created="Thu, 01 Dec 2022 14:46:34 GMT">
					<outline text="Click on &lt;i&gt;Preferences,&lt;/i&gt; in the right margin." created="Thu, 01 Dec 2022 14:46:44 GMT"/>
					<outline text="Click on &lt;i&gt;Development&lt;/i&gt; in the left margin." created="Thu, 01 Dec 2022 14:52:14 GMT"/>
					<outline text="Click on the &lt;i&gt;New application&lt;/i&gt; button in the upper right corner. " created="Thu, 01 Dec 2022 14:52:35 GMT"/>
					<outline text="You should see a form that &lt;a href=&quot;http://scripting.com/images/2022/12/01/newApplicationScreen.png&quot;&gt;looks like this&lt;/a&gt;. We're going to fill in the form. " created="Thu, 01 Dec 2022 14:52:47 GMT">
						<outline text="* Application name -- anything you like, perhaps feedToMasto." created="Thu, 01 Dec 2022 14:54:58 GMT"/>
						<outline text="* Application website -- anything you like." created="Thu, 01 Dec 2022 14:55:36 GMT"/>
						<outline text="* Redirect URI -- leave it as-is." created="Thu, 01 Dec 2022 14:55:45 GMT"/>
						</outline>
					<outline text="In the &lt;i&gt;Scopes&lt;/i&gt; section do the following." created="Thu, 01 Dec 2022 14:56:00 GMT">
						<outline text="* Uncheck read." created="Thu, 01 Dec 2022 14:56:20 GMT"/>
						<outline text="* Check read:accounts." created="Thu, 01 Dec 2022 14:56:23 GMT"/>
						<outline text="* Uncheck write." created="Thu, 01 Dec 2022 14:56:36 GMT"/>
						<outline text="* Check write:statuses." created="Thu, 01 Dec 2022 14:57:17 GMT"/>
						<outline text="* Uncheck follow." created="Thu, 01 Dec 2022 14:57:28 GMT"/>
						</outline>
					<outline text="When you're done the Scopes section should &lt;a href=&quot;http://scripting.com/images/2022/12/01/checkboxesScreen.png&quot;&gt;look like this&lt;/a&gt;. " created="Thu, 01 Dec 2022 15:00:07 GMT"/>
					<outline text="Finally click the Submit button at the bottom of the page. " created="Thu, 01 Dec 2022 15:01:06 GMT"/>
					<outline text="You should then see a list of your applications, with this new app on the list." created="Thu, 01 Dec 2022 15:01:22 GMT"/>
					<outline text="Click on the name of the new app to bring up a screen with various numeric strings you'll add to config.json in the next section." created="Fri, 02 Dec 2022 18:06:09 GMT"/>
					</outline>
				<outline text="### Back in config.json" created="Thu, 01 Dec 2022 15:01:42 GMT">
					<outline text="Open config.json in an editor. &lt;a href=&quot;http://scripting.com/images/2022/12/01/configJsonScreen.png&quot;&gt;This&lt;/a&gt; is what you should see. " created="Thu, 01 Dec 2022 15:19:22 GMT"/>
					<outline text="On the screen in your browser you should see various numeric strings that you are going to copy into config.json." created="Thu, 01 Dec 2022 15:19:36 GMT"/>
					<outline text="Copy the three items, &lt;i&gt;Client key,&lt;/i&gt; &lt;i&gt;Client secret&lt;/i&gt; and &lt;i&gt;Your access token&lt;/i&gt; from the browser to the xxx's in config.json as shown in this &lt;a href=&quot;http://scripting.com/images/2022/12/01/copyFromWebToConfig.png&quot;&gt;screen shot&lt;/a&gt;. " created="Thu, 01 Dec 2022 15:26:18 GMT"/>
					<outline text="Enter the URL of your Mastodon server in &lt;i&gt;urlMastodonServer&lt;/i&gt; in config.json." created="Thu, 01 Dec 2022 15:27:43 GMT"/>
					</outline>
				<outline text="### Screen shot" created="Thu, 01 Dec 2022 17:12:32 GMT">
					<outline text="&lt;img src=&quot;http://scripting.com/images/2022/12/01/arrowsOnMasto.png&quot;&gt;" created="Thu, 01 Dec 2022 17:11:26 GMT"/>
					</outline>
				<outline text="### Using with Bluesky" created="Sat, 13 May 2023 14:32:41 GMT">
					<outline text="In config.json, at the top level, create a new object called bluesky." created="Sat, 13 May 2023 14:34:15 GMT"/>
					<outline text="Set it up as shown in the &lt;a href=&quot;https://github.com/scripting/feedToMasto/blob/main/config.json&quot;&gt;example file&lt;/a&gt;. Basically you're providing the same info you provide when you log in personally, your username, email address and password. " created="Sat, 13 May 2023 14:34:32 GMT"/>
					<outline text="Why Bluesky? I wanted to start fanning out to support new social networks other than Mastodon. I was using Bluesky and had some good &lt;a href=&quot;https://www.manton.org/2023/04/29/getting-started-with.html&quot;&gt;developer docs&lt;/a&gt; from my friend Manton Reece, so I decided the second platform would be Bluesky. This is not an endorsement of the product. " created="Sat, 13 May 2023 14:32:58 GMT"/>
					</outline>
				<outline text="### Using with WordPress" created="Sat, 13 May 2023 14:32:41 GMT">
					<outline text="In config.json, at the top level, create a new object called wordpress." created="Sat, 13 May 2023 14:34:15 GMT"/>
					<outline text="Set it up as shown in the &lt;a href=&quot;https://github.com/scripting/feedToMasto/blob/main/config.json&quot;&gt;example file&lt;/a&gt;. Basically you're providing the same info you provide when you log in personally, your username, email address and password. " created="Sat, 13 May 2023 14:34:32 GMT"/>
					<outline text="Why WordPress? It's like the Mount Everest of social media, so huge you often miss it. It also supports all the features of textcasting, so it's a way to test all the features, flowing from RSS, that also supports all the features of textcasting. " created="Sat, 13 May 2023 14:32:58 GMT"/>
					</outline>
				<outline text="### What the other items in config.json are for" created="Thu, 01 Dec 2022 15:28:26 GMT">
					<outline text="The other values in config.json have default values that work well for a first run of the app. The only ones you should come back before running it for real are &lt;i&gt;feeds&lt;/i&gt; and &lt;i&gt;disclaimer. &lt;/i&gt;" created="Thu, 01 Dec 2022 15:46:21 GMT">
						<outline text="* enabled -- if you set it false and reboot the app it will do everything but check the feeds. " created="Thu, 01 Dec 2022 15:28:39 GMT"/>
						<outline text="* feeds -- an array of feed URLs. I've included two feeds to get you started. You should change them to your feed addresses of course. " created="Thu, 01 Dec 2022 15:30:03 GMT"/>
						<outline text="* ctSecsBetwChecks -- the amount of time between feed checks. We only check every minute at the top of the minute. Default value is 60." created="Thu, 01 Dec 2022 15:30:34 GMT"/>
						<outline text="* maxCtChars -- the number of characters in a toot. Maybe you have a higher number on your server?" created="Thu, 01 Dec 2022 15:31:37 GMT"/>
						<outline text="* flOnlyPostNewItems -- If false, the first time we read a feed we'll dump all the items into the Mastodon account. Probably not what you had in mind, that's why it defaults to true. " created="Thu, 01 Dec 2022 15:32:05 GMT"/>
						<outline text="* maxGuids -- we use the guids in feed items to determine if we've already pushed the item to Mastodon. At some point we no longer need to keep it around because it's no longer in the feed, but we never know for sure what that is. It depends on how many feeds you have and how big they tend to get. The default of 2500 seemed a good balance between performance and the risk of posting items twice." created="Thu, 01 Dec 2022 15:32:59 GMT"/>
						<outline text="* flServerSupportsMarkdown -- if it does, we'll look for source:markdown elements in the feed item and transmit that in place of the description element." created="Thu, 01 Dec 2022 15:34:14 GMT"/>
						<outline text="* disclaimer -- text that appears at the begining of every toot. If you don't want it, make it the empty string." created="Thu, 01 Dec 2022 15:35:05 GMT"/>
						</outline>
					</outline>
				<outline text="### Notes" created="Thu, 01 Dec 2022 15:56:33 GMT">
					<outline text="&lt;a href=&quot;http://scripting.com/2020/05/26/194558.html?title=bugReportsNotPullRequests&quot;&gt;Bug reports, not pull requests&lt;/a&gt;. " created="Thu, 01 Dec 2022 15:56:37 GMT"/>
					<outline text="Comments, questions, feature requests, bug reports &lt;a href=&quot;https://github.com/scripting/feedToMasto/issues&quot;&gt;here&lt;/a&gt;. " created="Thu, 01 Dec 2022 15:56:41 GMT"/>
					</outline>
				</outline>
			<outline text="config.json" isComment="true" created="Sat, 13 May 2023 14:36:05 GMT">
				<outline text="{">
					<outline text="&quot;enabled&quot;: true,"/>
					<outline text="&quot;feeds&quot;: [">
						<outline text="&quot;http://data.feedland.org/feeds/davewiner.xml&quot;,"/>
						<outline text="&quot;http://nytimes.com/timeswire/feeds/&quot;"/>
						<outline text="],"/>
						</outline>
					<outline text="&quot;masto&quot;: {">
						<outline text="&quot;enabled&quot;: true,"/>
						<outline text="&quot;appName&quot;: &quot;feedToMasto&quot;,"/>
						<outline text="&quot;urlMastodonServer&quot;: &quot;https://my.masto.social/&quot;,"/>
						<outline text="&quot;clientKey&quot;: &quot;xxx&quot;,"/>
						<outline text="&quot;clientSecret&quot;: &quot;xxx&quot;,"/>
						<outline text="&quot;accessToken&quot;: &quot;xxx&quot;,"/>
						<outline text="&quot;scopes&quot;: &quot;write:statuses+read:accounts&quot;,"/>
						<outline text="&quot;flServerSupportsMarkdown&quot;: false"/>
						<outline text="},"/>
						</outline>
					<outline text="&quot;bluesky&quot;: {">
						<outline text="&quot;enabled&quot;: true,"/>
						<outline text="&quot;username&quot;: &quot;bullmancuso&quot;,"/>
						<outline text="&quot;mailaddress&quot;: &quot;bull@mancuso.com&quot;,"/>
						<outline text="&quot;password&quot;: &quot;xxx&quot;,"/>
						<outline text="&quot;urlsite&quot;: &quot;https://bsky.social/&quot;,"/>
						<outline text="&quot;maxCtChars&quot;: 300,"/>
						<outline text="&quot;flServerSupportsMarkdown&quot;: false"/>
						<outline text="},"/>
						</outline>
					<outline text="&quot;ctSecsBetwChecks&quot;: 60,"/>
					<outline text="&quot;maxCtChars&quot;: 500,"/>
					<outline text="&quot;flOnlyPostNewItems&quot;: true,"/>
					<outline text="&quot;maxGuids&quot;: 2500,"/>
					<outline text="&quot;flServerSupportsMarkdown&quot;: false,"/>
					<outline text="&quot;disclaimer&quot;: &quot;&quot;"/>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="config.json -- old version from before bluesky added" isComment="true" created="Sat, 13 May 2023 14:41:13 GMT">
				<outline text="{">
					<outline text="&quot;enabled&quot;: true,"/>
					<outline text="&quot;feeds&quot;: [">
						<outline text="&quot;http://scripting.com/rss.xml&quot;,"/>
						<outline text="&quot;http://radio3.io/users/davewiner/rss.xml&quot;,"/>
						<outline text="&quot;http://data.feedland.org/likes.xml&quot;,"/>
						<outline text="&quot;http://data.feedland.org/feeds/davewiner.xml&quot;,"/>
						<outline text="&quot;http://nytimes.com/timeswire/feeds/&quot;"/>
						<outline text="],"/>
						</outline>
					<outline text="&quot;masto&quot;: {">
						<outline text="&quot;appName&quot;: &quot;feedToMasto&quot;,"/>
						<outline text="&quot;urlMastodonServer&quot;: &quot;https://my.masto.social/&quot;,"/>
						<outline text="&quot;clientKey&quot;: &quot;xxx&quot;,"/>
						<outline text="&quot;clientSecret&quot;: &quot;xxx&quot;,"/>
						<outline text="&quot;accessToken&quot;: &quot;xxx&quot;,"/>
						<outline text="&quot;scopes&quot;: &quot;write:statuses+read:accounts&quot;"/>
						<outline text="},"/>
						</outline>
					<outline text="&quot;ctSecsBetwChecks&quot;: 60,"/>
					<outline text="&quot;maxCtChars&quot;: 500,"/>
					<outline text="&quot;flOnlyPostNewItems&quot;: true,"/>
					<outline text="&quot;maxGuids&quot;: 2500,"/>
					<outline text="&quot;flServerSupportsMarkdown&quot;: true,"/>
					<outline text="&quot;disclaimer&quot;: &quot;&quot;"/>
					<outline text="}"/>
					</outline>
				</outline>
			</outline>
		<outline text="build script" created="Tue, 29 Nov 2022 14:08:17 GMT">
			<outline text="nodeEditorSuite.utilities.buildIFeedToMasto ()" created="Sun, 06 Nov 2022 15:51:50 GMT"/>
			</outline>
		</body>
	</opml>
